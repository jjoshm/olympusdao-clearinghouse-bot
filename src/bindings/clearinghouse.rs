#![allow(clippy::all)]
//! This lib contains abigen! generated bindings for solidity contracts.
//! This is autogenerated code.
//! Do not manually edit these files.
//! These files may be overwritten by the codegen system at any time.
pub use clearinghouse::*;
/// This module was auto-generated with ethers-rs Abigen.
/// More information at: <https://github.com/gakonst/ethers-rs>
#[allow(
    clippy::enum_variant_names,
    clippy::too_many_arguments,
    clippy::upper_case_acronyms,
    clippy::type_complexity,
    dead_code,
    non_camel_case_types,
)]
pub mod clearinghouse {
    #[allow(deprecated)]
    fn __abi() -> ::ethers::core::abi::Abi {
        ::ethers::core::abi::ethabi::Contract {
            constructor: ::core::option::Option::Some(::ethers::core::abi::ethabi::Constructor {
                inputs: ::std::vec![
                    ::ethers::core::abi::ethabi::Param {
                        name: ::std::borrow::ToOwned::to_owned("ohm_"),
                        kind: ::ethers::core::abi::ethabi::ParamType::Address,
                        internal_type: ::core::option::Option::Some(
                            ::std::borrow::ToOwned::to_owned("address"),
                        ),
                    },
                    ::ethers::core::abi::ethabi::Param {
                        name: ::std::borrow::ToOwned::to_owned("gohm_"),
                        kind: ::ethers::core::abi::ethabi::ParamType::Address,
                        internal_type: ::core::option::Option::Some(
                            ::std::borrow::ToOwned::to_owned("address"),
                        ),
                    },
                    ::ethers::core::abi::ethabi::Param {
                        name: ::std::borrow::ToOwned::to_owned("staking_"),
                        kind: ::ethers::core::abi::ethabi::ParamType::Address,
                        internal_type: ::core::option::Option::Some(
                            ::std::borrow::ToOwned::to_owned("address"),
                        ),
                    },
                    ::ethers::core::abi::ethabi::Param {
                        name: ::std::borrow::ToOwned::to_owned("sdai_"),
                        kind: ::ethers::core::abi::ethabi::ParamType::Address,
                        internal_type: ::core::option::Option::Some(
                            ::std::borrow::ToOwned::to_owned("address"),
                        ),
                    },
                    ::ethers::core::abi::ethabi::Param {
                        name: ::std::borrow::ToOwned::to_owned("coolerFactory_"),
                        kind: ::ethers::core::abi::ethabi::ParamType::Address,
                        internal_type: ::core::option::Option::Some(
                            ::std::borrow::ToOwned::to_owned("address"),
                        ),
                    },
                    ::ethers::core::abi::ethabi::Param {
                        name: ::std::borrow::ToOwned::to_owned("kernel_"),
                        kind: ::ethers::core::abi::ethabi::ParamType::Address,
                        internal_type: ::core::option::Option::Some(
                            ::std::borrow::ToOwned::to_owned("address"),
                        ),
                    },
                ],
            }),
            functions: ::core::convert::From::from([
                (
                    ::std::borrow::ToOwned::to_owned("DURATION"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::Function {
                            name: ::std::borrow::ToOwned::to_owned("DURATION"),
                            inputs: ::std::vec![],
                            outputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::string::String::new(),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Uint(
                                        256usize,
                                    ),
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("uint256"),
                                    ),
                                },
                            ],
                            constant: ::core::option::Option::None,
                            state_mutability: ::ethers::core::abi::ethabi::StateMutability::View,
                        },
                    ],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("FUND_AMOUNT"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::Function {
                            name: ::std::borrow::ToOwned::to_owned("FUND_AMOUNT"),
                            inputs: ::std::vec![],
                            outputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::string::String::new(),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Uint(
                                        256usize,
                                    ),
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("uint256"),
                                    ),
                                },
                            ],
                            constant: ::core::option::Option::None,
                            state_mutability: ::ethers::core::abi::ethabi::StateMutability::View,
                        },
                    ],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("FUND_CADENCE"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::Function {
                            name: ::std::borrow::ToOwned::to_owned("FUND_CADENCE"),
                            inputs: ::std::vec![],
                            outputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::string::String::new(),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Uint(
                                        256usize,
                                    ),
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("uint256"),
                                    ),
                                },
                            ],
                            constant: ::core::option::Option::None,
                            state_mutability: ::ethers::core::abi::ethabi::StateMutability::View,
                        },
                    ],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("INTEREST_RATE"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::Function {
                            name: ::std::borrow::ToOwned::to_owned("INTEREST_RATE"),
                            inputs: ::std::vec![],
                            outputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::string::String::new(),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Uint(
                                        256usize,
                                    ),
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("uint256"),
                                    ),
                                },
                            ],
                            constant: ::core::option::Option::None,
                            state_mutability: ::ethers::core::abi::ethabi::StateMutability::View,
                        },
                    ],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("LOAN_TO_COLLATERAL"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::Function {
                            name: ::std::borrow::ToOwned::to_owned("LOAN_TO_COLLATERAL"),
                            inputs: ::std::vec![],
                            outputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::string::String::new(),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Uint(
                                        256usize,
                                    ),
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("uint256"),
                                    ),
                                },
                            ],
                            constant: ::core::option::Option::None,
                            state_mutability: ::ethers::core::abi::ethabi::StateMutability::View,
                        },
                    ],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("MAX_REWARD"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::Function {
                            name: ::std::borrow::ToOwned::to_owned("MAX_REWARD"),
                            inputs: ::std::vec![],
                            outputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::string::String::new(),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Uint(
                                        256usize,
                                    ),
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("uint256"),
                                    ),
                                },
                            ],
                            constant: ::core::option::Option::None,
                            state_mutability: ::ethers::core::abi::ethabi::StateMutability::View,
                        },
                    ],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("MINTR"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::Function {
                            name: ::std::borrow::ToOwned::to_owned("MINTR"),
                            inputs: ::std::vec![],
                            outputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::string::String::new(),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Address,
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("contract MINTRv1"),
                                    ),
                                },
                            ],
                            constant: ::core::option::Option::None,
                            state_mutability: ::ethers::core::abi::ethabi::StateMutability::View,
                        },
                    ],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("ROLES"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::Function {
                            name: ::std::borrow::ToOwned::to_owned("ROLES"),
                            inputs: ::std::vec![],
                            outputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::string::String::new(),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Address,
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("contract ROLESv1"),
                                    ),
                                },
                            ],
                            constant: ::core::option::Option::None,
                            state_mutability: ::ethers::core::abi::ethabi::StateMutability::View,
                        },
                    ],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("TRSRY"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::Function {
                            name: ::std::borrow::ToOwned::to_owned("TRSRY"),
                            inputs: ::std::vec![],
                            outputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::string::String::new(),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Address,
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("contract TRSRYv1"),
                                    ),
                                },
                            ],
                            constant: ::core::option::Option::None,
                            state_mutability: ::ethers::core::abi::ethabi::StateMutability::View,
                        },
                    ],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("active"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::Function {
                            name: ::std::borrow::ToOwned::to_owned("active"),
                            inputs: ::std::vec![],
                            outputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::string::String::new(),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Bool,
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("bool"),
                                    ),
                                },
                            ],
                            constant: ::core::option::Option::None,
                            state_mutability: ::ethers::core::abi::ethabi::StateMutability::View,
                        },
                    ],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("burn"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::Function {
                            name: ::std::borrow::ToOwned::to_owned("burn"),
                            inputs: ::std::vec![],
                            outputs: ::std::vec![],
                            constant: ::core::option::Option::None,
                            state_mutability: ::ethers::core::abi::ethabi::StateMutability::NonPayable,
                        },
                    ],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("changeKernel"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::Function {
                            name: ::std::borrow::ToOwned::to_owned("changeKernel"),
                            inputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("newKernel_"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Address,
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("contract Kernel"),
                                    ),
                                },
                            ],
                            outputs: ::std::vec![],
                            constant: ::core::option::Option::None,
                            state_mutability: ::ethers::core::abi::ethabi::StateMutability::NonPayable,
                        },
                    ],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("claimDefaulted"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::Function {
                            name: ::std::borrow::ToOwned::to_owned("claimDefaulted"),
                            inputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("coolers_"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Array(
                                        ::std::boxed::Box::new(
                                            ::ethers::core::abi::ethabi::ParamType::Address,
                                        ),
                                    ),
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("address[]"),
                                    ),
                                },
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("loans_"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Array(
                                        ::std::boxed::Box::new(
                                            ::ethers::core::abi::ethabi::ParamType::Uint(256usize),
                                        ),
                                    ),
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("uint256[]"),
                                    ),
                                },
                            ],
                            outputs: ::std::vec![],
                            constant: ::core::option::Option::None,
                            state_mutability: ::ethers::core::abi::ethabi::StateMutability::NonPayable,
                        },
                    ],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("configureDependencies"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::Function {
                            name: ::std::borrow::ToOwned::to_owned(
                                "configureDependencies",
                            ),
                            inputs: ::std::vec![],
                            outputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("dependencies"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Array(
                                        ::std::boxed::Box::new(
                                            ::ethers::core::abi::ethabi::ParamType::FixedBytes(5usize),
                                        ),
                                    ),
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("Keycode[]"),
                                    ),
                                },
                            ],
                            constant: ::core::option::Option::None,
                            state_mutability: ::ethers::core::abi::ethabi::StateMutability::NonPayable,
                        },
                    ],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("dai"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::Function {
                            name: ::std::borrow::ToOwned::to_owned("dai"),
                            inputs: ::std::vec![],
                            outputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::string::String::new(),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Address,
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("contract ERC20"),
                                    ),
                                },
                            ],
                            constant: ::core::option::Option::None,
                            state_mutability: ::ethers::core::abi::ethabi::StateMutability::View,
                        },
                    ],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("defund"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::Function {
                            name: ::std::borrow::ToOwned::to_owned("defund"),
                            inputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("token_"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Address,
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("contract ERC20"),
                                    ),
                                },
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("amount_"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Uint(
                                        256usize,
                                    ),
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("uint256"),
                                    ),
                                },
                            ],
                            outputs: ::std::vec![],
                            constant: ::core::option::Option::None,
                            state_mutability: ::ethers::core::abi::ethabi::StateMutability::NonPayable,
                        },
                    ],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("emergencyShutdown"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::Function {
                            name: ::std::borrow::ToOwned::to_owned("emergencyShutdown"),
                            inputs: ::std::vec![],
                            outputs: ::std::vec![],
                            constant: ::core::option::Option::None,
                            state_mutability: ::ethers::core::abi::ethabi::StateMutability::NonPayable,
                        },
                    ],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("extendLoan"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::Function {
                            name: ::std::borrow::ToOwned::to_owned("extendLoan"),
                            inputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("cooler_"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Address,
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("contract Cooler"),
                                    ),
                                },
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("loanID_"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Uint(
                                        256usize,
                                    ),
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("uint256"),
                                    ),
                                },
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("times_"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Uint(8usize),
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("uint8"),
                                    ),
                                },
                            ],
                            outputs: ::std::vec![],
                            constant: ::core::option::Option::None,
                            state_mutability: ::ethers::core::abi::ethabi::StateMutability::NonPayable,
                        },
                    ],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("factory"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::Function {
                            name: ::std::borrow::ToOwned::to_owned("factory"),
                            inputs: ::std::vec![],
                            outputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::string::String::new(),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Address,
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("contract CoolerFactory"),
                                    ),
                                },
                            ],
                            constant: ::core::option::Option::None,
                            state_mutability: ::ethers::core::abi::ethabi::StateMutability::View,
                        },
                    ],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("fundTime"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::Function {
                            name: ::std::borrow::ToOwned::to_owned("fundTime"),
                            inputs: ::std::vec![],
                            outputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::string::String::new(),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Uint(
                                        256usize,
                                    ),
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("uint256"),
                                    ),
                                },
                            ],
                            constant: ::core::option::Option::None,
                            state_mutability: ::ethers::core::abi::ethabi::StateMutability::View,
                        },
                    ],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("getCollateralForLoan"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::Function {
                            name: ::std::borrow::ToOwned::to_owned(
                                "getCollateralForLoan",
                            ),
                            inputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("principal_"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Uint(
                                        256usize,
                                    ),
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("uint256"),
                                    ),
                                },
                            ],
                            outputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::string::String::new(),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Uint(
                                        256usize,
                                    ),
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("uint256"),
                                    ),
                                },
                            ],
                            constant: ::core::option::Option::None,
                            state_mutability: ::ethers::core::abi::ethabi::StateMutability::Pure,
                        },
                    ],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("getLoanForCollateral"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::Function {
                            name: ::std::borrow::ToOwned::to_owned(
                                "getLoanForCollateral",
                            ),
                            inputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("collateral_"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Uint(
                                        256usize,
                                    ),
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("uint256"),
                                    ),
                                },
                            ],
                            outputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::string::String::new(),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Uint(
                                        256usize,
                                    ),
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("uint256"),
                                    ),
                                },
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::string::String::new(),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Uint(
                                        256usize,
                                    ),
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("uint256"),
                                    ),
                                },
                            ],
                            constant: ::core::option::Option::None,
                            state_mutability: ::ethers::core::abi::ethabi::StateMutability::Pure,
                        },
                    ],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("getTotalReceivables"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::Function {
                            name: ::std::borrow::ToOwned::to_owned(
                                "getTotalReceivables",
                            ),
                            inputs: ::std::vec![],
                            outputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::string::String::new(),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Uint(
                                        256usize,
                                    ),
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("uint256"),
                                    ),
                                },
                            ],
                            constant: ::core::option::Option::None,
                            state_mutability: ::ethers::core::abi::ethabi::StateMutability::View,
                        },
                    ],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("gohm"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::Function {
                            name: ::std::borrow::ToOwned::to_owned("gohm"),
                            inputs: ::std::vec![],
                            outputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::string::String::new(),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Address,
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("contract ERC20"),
                                    ),
                                },
                            ],
                            constant: ::core::option::Option::None,
                            state_mutability: ::ethers::core::abi::ethabi::StateMutability::View,
                        },
                    ],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("interestForLoan"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::Function {
                            name: ::std::borrow::ToOwned::to_owned("interestForLoan"),
                            inputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("principal_"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Uint(
                                        256usize,
                                    ),
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("uint256"),
                                    ),
                                },
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("duration_"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Uint(
                                        256usize,
                                    ),
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("uint256"),
                                    ),
                                },
                            ],
                            outputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::string::String::new(),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Uint(
                                        256usize,
                                    ),
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("uint256"),
                                    ),
                                },
                            ],
                            constant: ::core::option::Option::None,
                            state_mutability: ::ethers::core::abi::ethabi::StateMutability::Pure,
                        },
                    ],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("interestReceivables"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::Function {
                            name: ::std::borrow::ToOwned::to_owned(
                                "interestReceivables",
                            ),
                            inputs: ::std::vec![],
                            outputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::string::String::new(),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Uint(
                                        256usize,
                                    ),
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("uint256"),
                                    ),
                                },
                            ],
                            constant: ::core::option::Option::None,
                            state_mutability: ::ethers::core::abi::ethabi::StateMutability::View,
                        },
                    ],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("isActive"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::Function {
                            name: ::std::borrow::ToOwned::to_owned("isActive"),
                            inputs: ::std::vec![],
                            outputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::string::String::new(),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Bool,
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("bool"),
                                    ),
                                },
                            ],
                            constant: ::core::option::Option::None,
                            state_mutability: ::ethers::core::abi::ethabi::StateMutability::View,
                        },
                    ],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("isCoolerCallback"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::Function {
                            name: ::std::borrow::ToOwned::to_owned("isCoolerCallback"),
                            inputs: ::std::vec![],
                            outputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::string::String::new(),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Bool,
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("bool"),
                                    ),
                                },
                            ],
                            constant: ::core::option::Option::None,
                            state_mutability: ::ethers::core::abi::ethabi::StateMutability::Pure,
                        },
                    ],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("kernel"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::Function {
                            name: ::std::borrow::ToOwned::to_owned("kernel"),
                            inputs: ::std::vec![],
                            outputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::string::String::new(),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Address,
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("contract Kernel"),
                                    ),
                                },
                            ],
                            constant: ::core::option::Option::None,
                            state_mutability: ::ethers::core::abi::ethabi::StateMutability::View,
                        },
                    ],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("lendToCooler"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::Function {
                            name: ::std::borrow::ToOwned::to_owned("lendToCooler"),
                            inputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("cooler_"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Address,
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("contract Cooler"),
                                    ),
                                },
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("amount_"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Uint(
                                        256usize,
                                    ),
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("uint256"),
                                    ),
                                },
                            ],
                            outputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::string::String::new(),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Uint(
                                        256usize,
                                    ),
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("uint256"),
                                    ),
                                },
                            ],
                            constant: ::core::option::Option::None,
                            state_mutability: ::ethers::core::abi::ethabi::StateMutability::NonPayable,
                        },
                    ],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("ohm"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::Function {
                            name: ::std::borrow::ToOwned::to_owned("ohm"),
                            inputs: ::std::vec![],
                            outputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::string::String::new(),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Address,
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("contract ERC20"),
                                    ),
                                },
                            ],
                            constant: ::core::option::Option::None,
                            state_mutability: ::ethers::core::abi::ethabi::StateMutability::View,
                        },
                    ],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("onDefault"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::Function {
                            name: ::std::borrow::ToOwned::to_owned("onDefault"),
                            inputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("loanID_"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Uint(
                                        256usize,
                                    ),
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("uint256"),
                                    ),
                                },
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("principle"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Uint(
                                        256usize,
                                    ),
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("uint256"),
                                    ),
                                },
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("interest"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Uint(
                                        256usize,
                                    ),
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("uint256"),
                                    ),
                                },
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("collateral"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Uint(
                                        256usize,
                                    ),
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("uint256"),
                                    ),
                                },
                            ],
                            outputs: ::std::vec![],
                            constant: ::core::option::Option::None,
                            state_mutability: ::ethers::core::abi::ethabi::StateMutability::NonPayable,
                        },
                    ],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("onRepay"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::Function {
                            name: ::std::borrow::ToOwned::to_owned("onRepay"),
                            inputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("loanID_"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Uint(
                                        256usize,
                                    ),
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("uint256"),
                                    ),
                                },
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("principlePaid_"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Uint(
                                        256usize,
                                    ),
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("uint256"),
                                    ),
                                },
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("interestPaid_"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Uint(
                                        256usize,
                                    ),
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("uint256"),
                                    ),
                                },
                            ],
                            outputs: ::std::vec![],
                            constant: ::core::option::Option::None,
                            state_mutability: ::ethers::core::abi::ethabi::StateMutability::NonPayable,
                        },
                    ],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("principalReceivables"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::Function {
                            name: ::std::borrow::ToOwned::to_owned(
                                "principalReceivables",
                            ),
                            inputs: ::std::vec![],
                            outputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::string::String::new(),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Uint(
                                        256usize,
                                    ),
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("uint256"),
                                    ),
                                },
                            ],
                            constant: ::core::option::Option::None,
                            state_mutability: ::ethers::core::abi::ethabi::StateMutability::View,
                        },
                    ],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("reactivate"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::Function {
                            name: ::std::borrow::ToOwned::to_owned("reactivate"),
                            inputs: ::std::vec![],
                            outputs: ::std::vec![],
                            constant: ::core::option::Option::None,
                            state_mutability: ::ethers::core::abi::ethabi::StateMutability::NonPayable,
                        },
                    ],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("rebalance"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::Function {
                            name: ::std::borrow::ToOwned::to_owned("rebalance"),
                            inputs: ::std::vec![],
                            outputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::string::String::new(),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Bool,
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("bool"),
                                    ),
                                },
                            ],
                            constant: ::core::option::Option::None,
                            state_mutability: ::ethers::core::abi::ethabi::StateMutability::NonPayable,
                        },
                    ],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("requestPermissions"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::Function {
                            name: ::std::borrow::ToOwned::to_owned("requestPermissions"),
                            inputs: ::std::vec![],
                            outputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("requests"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Array(
                                        ::std::boxed::Box::new(
                                            ::ethers::core::abi::ethabi::ParamType::Tuple(
                                                ::std::vec![
                                                    ::ethers::core::abi::ethabi::ParamType::FixedBytes(5usize),
                                                    ::ethers::core::abi::ethabi::ParamType::FixedBytes(4usize),
                                                ],
                                            ),
                                        ),
                                    ),
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("struct Permissions[]"),
                                    ),
                                },
                            ],
                            constant: ::core::option::Option::None,
                            state_mutability: ::ethers::core::abi::ethabi::StateMutability::View,
                        },
                    ],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("sdai"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::Function {
                            name: ::std::borrow::ToOwned::to_owned("sdai"),
                            inputs: ::std::vec![],
                            outputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::string::String::new(),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Address,
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("contract ERC4626"),
                                    ),
                                },
                            ],
                            constant: ::core::option::Option::None,
                            state_mutability: ::ethers::core::abi::ethabi::StateMutability::View,
                        },
                    ],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("staking"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::Function {
                            name: ::std::borrow::ToOwned::to_owned("staking"),
                            inputs: ::std::vec![],
                            outputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::string::String::new(),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Address,
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("contract IStaking"),
                                    ),
                                },
                            ],
                            constant: ::core::option::Option::None,
                            state_mutability: ::ethers::core::abi::ethabi::StateMutability::View,
                        },
                    ],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("sweepIntoDSR"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::Function {
                            name: ::std::borrow::ToOwned::to_owned("sweepIntoDSR"),
                            inputs: ::std::vec![],
                            outputs: ::std::vec![],
                            constant: ::core::option::Option::None,
                            state_mutability: ::ethers::core::abi::ethabi::StateMutability::NonPayable,
                        },
                    ],
                ),
            ]),
            events: ::core::convert::From::from([
                (
                    ::std::borrow::ToOwned::to_owned("Deactivate"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::Event {
                            name: ::std::borrow::ToOwned::to_owned("Deactivate"),
                            inputs: ::std::vec![],
                            anonymous: false,
                        },
                    ],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("Defund"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::Event {
                            name: ::std::borrow::ToOwned::to_owned("Defund"),
                            inputs: ::std::vec![
                                ::ethers::core::abi::ethabi::EventParam {
                                    name: ::std::borrow::ToOwned::to_owned("token"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Address,
                                    indexed: false,
                                },
                                ::ethers::core::abi::ethabi::EventParam {
                                    name: ::std::borrow::ToOwned::to_owned("amount"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Uint(
                                        256usize,
                                    ),
                                    indexed: false,
                                },
                            ],
                            anonymous: false,
                        },
                    ],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("Reactivate"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::Event {
                            name: ::std::borrow::ToOwned::to_owned("Reactivate"),
                            inputs: ::std::vec![],
                            anonymous: false,
                        },
                    ],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("Rebalance"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::Event {
                            name: ::std::borrow::ToOwned::to_owned("Rebalance"),
                            inputs: ::std::vec![
                                ::ethers::core::abi::ethabi::EventParam {
                                    name: ::std::borrow::ToOwned::to_owned("defund"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Bool,
                                    indexed: false,
                                },
                                ::ethers::core::abi::ethabi::EventParam {
                                    name: ::std::borrow::ToOwned::to_owned("daiAmount"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Uint(
                                        256usize,
                                    ),
                                    indexed: false,
                                },
                            ],
                            anonymous: false,
                        },
                    ],
                ),
            ]),
            errors: ::core::convert::From::from([
                (
                    ::std::borrow::ToOwned::to_owned("BadEscrow"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::AbiError {
                            name: ::std::borrow::ToOwned::to_owned("BadEscrow"),
                            inputs: ::std::vec![],
                        },
                    ],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("DurationMaximum"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::AbiError {
                            name: ::std::borrow::ToOwned::to_owned("DurationMaximum"),
                            inputs: ::std::vec![],
                        },
                    ],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("KernelAdapter_OnlyKernel"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::AbiError {
                            name: ::std::borrow::ToOwned::to_owned(
                                "KernelAdapter_OnlyKernel",
                            ),
                            inputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("caller_"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Address,
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("address"),
                                    ),
                                },
                            ],
                        },
                    ],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("LengthDiscrepancy"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::AbiError {
                            name: ::std::borrow::ToOwned::to_owned("LengthDiscrepancy"),
                            inputs: ::std::vec![],
                        },
                    ],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("NotLender"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::AbiError {
                            name: ::std::borrow::ToOwned::to_owned("NotLender"),
                            inputs: ::std::vec![],
                        },
                    ],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("OnlyBorrower"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::AbiError {
                            name: ::std::borrow::ToOwned::to_owned("OnlyBorrower"),
                            inputs: ::std::vec![],
                        },
                    ],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("OnlyBurnable"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::AbiError {
                            name: ::std::borrow::ToOwned::to_owned("OnlyBurnable"),
                            inputs: ::std::vec![],
                        },
                    ],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("OnlyFromFactory"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::AbiError {
                            name: ::std::borrow::ToOwned::to_owned("OnlyFromFactory"),
                            inputs: ::std::vec![],
                        },
                    ],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("Policy_ModuleDoesNotExist"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::AbiError {
                            name: ::std::borrow::ToOwned::to_owned(
                                "Policy_ModuleDoesNotExist",
                            ),
                            inputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("keycode_"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::FixedBytes(
                                        5usize,
                                    ),
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("Keycode"),
                                    ),
                                },
                            ],
                        },
                    ],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("TooEarlyToFund"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::AbiError {
                            name: ::std::borrow::ToOwned::to_owned("TooEarlyToFund"),
                            inputs: ::std::vec![],
                        },
                    ],
                ),
            ]),
            receive: false,
            fallback: false,
        }
    }
    ///The parsed JSON ABI of the contract.
    pub static CLEARINGHOUSE_ABI: ::ethers::contract::Lazy<::ethers::core::abi::Abi> = ::ethers::contract::Lazy::new(
        __abi,
    );
    pub struct Clearinghouse<M>(::ethers::contract::Contract<M>);
    impl<M> ::core::clone::Clone for Clearinghouse<M> {
        fn clone(&self) -> Self {
            Self(::core::clone::Clone::clone(&self.0))
        }
    }
    impl<M> ::core::ops::Deref for Clearinghouse<M> {
        type Target = ::ethers::contract::Contract<M>;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl<M> ::core::ops::DerefMut for Clearinghouse<M> {
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl<M> ::core::fmt::Debug for Clearinghouse<M> {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple(::core::stringify!(Clearinghouse))
                .field(&self.address())
                .finish()
        }
    }
    impl<M: ::ethers::providers::Middleware> Clearinghouse<M> {
        /// Creates a new contract instance with the specified `ethers` client at
        /// `address`. The contract derefs to a `ethers::Contract` object.
        pub fn new<T: Into<::ethers::core::types::Address>>(
            address: T,
            client: ::std::sync::Arc<M>,
        ) -> Self {
            Self(
                ::ethers::contract::Contract::new(
                    address.into(),
                    CLEARINGHOUSE_ABI.clone(),
                    client,
                ),
            )
        }
        ///Calls the contract's `DURATION` (0x1be05289) function
        pub fn duration(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([27, 224, 82, 137], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `FUND_AMOUNT` (0x1accd130) function
        pub fn fund_amount(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([26, 204, 209, 48], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `FUND_CADENCE` (0x7b30f405) function
        pub fn fund_cadence(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([123, 48, 244, 5], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `INTEREST_RATE` (0x5b72a33a) function
        pub fn interest_rate(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([91, 114, 163, 58], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `LOAN_TO_COLLATERAL` (0x4db71fc9) function
        pub fn loan_to_collateral(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([77, 183, 31, 201], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `MAX_REWARD` (0x0e1505e0) function
        pub fn max_reward(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([14, 21, 5, 224], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `MINTR` (0x577de7d0) function
        pub fn mintr(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<
            M,
            ::ethers::core::types::Address,
        > {
            self.0
                .method_hash([87, 125, 231, 208], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `ROLES` (0x923cb952) function
        pub fn roles(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<
            M,
            ::ethers::core::types::Address,
        > {
            self.0
                .method_hash([146, 60, 185, 82], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `TRSRY` (0x80cee4ab) function
        pub fn trsry(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<
            M,
            ::ethers::core::types::Address,
        > {
            self.0
                .method_hash([128, 206, 228, 171], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `active` (0x02fb0c5e) function
        pub fn active(&self) -> ::ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([2, 251, 12, 94], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `burn` (0x44df8e70) function
        pub fn burn(&self) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([68, 223, 142, 112], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `changeKernel` (0x4657b36c) function
        pub fn change_kernel(
            &self,
            new_kernel: ::ethers::core::types::Address,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([70, 87, 179, 108], new_kernel)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `claimDefaulted` (0x6cab0074) function
        pub fn claim_defaulted(
            &self,
            coolers: ::std::vec::Vec<::ethers::core::types::Address>,
            loans: ::std::vec::Vec<::ethers::core::types::U256>,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([108, 171, 0, 116], (coolers, loans))
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `configureDependencies` (0x9459b875) function
        pub fn configure_dependencies(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, ::std::vec::Vec<[u8; 5]>> {
            self.0
                .method_hash([148, 89, 184, 117], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `dai` (0xf4b9fa75) function
        pub fn dai(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<
            M,
            ::ethers::core::types::Address,
        > {
            self.0
                .method_hash([244, 185, 250, 117], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `defund` (0xb3c6326b) function
        pub fn defund(
            &self,
            token: ::ethers::core::types::Address,
            amount: ::ethers::core::types::U256,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([179, 198, 50, 107], (token, amount))
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `emergencyShutdown` (0x3403c2fc) function
        pub fn emergency_shutdown(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([52, 3, 194, 252], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `extendLoan` (0x23831b77) function
        pub fn extend_loan(
            &self,
            cooler: ::ethers::core::types::Address,
            loan_id: ::ethers::core::types::U256,
            times: u8,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([35, 131, 27, 119], (cooler, loan_id, times))
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `factory` (0xc45a0155) function
        pub fn factory(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<
            M,
            ::ethers::core::types::Address,
        > {
            self.0
                .method_hash([196, 90, 1, 85], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `fundTime` (0xe7cc298e) function
        pub fn fund_time(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([231, 204, 41, 142], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `getCollateralForLoan` (0x79904e4c) function
        pub fn get_collateral_for_loan(
            &self,
            principal: ::ethers::core::types::U256,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([121, 144, 78, 76], principal)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `getLoanForCollateral` (0x30743257) function
        pub fn get_loan_for_collateral(
            &self,
            collateral: ::ethers::core::types::U256,
        ) -> ::ethers::contract::builders::ContractCall<
            M,
            (::ethers::core::types::U256, ::ethers::core::types::U256),
        > {
            self.0
                .method_hash([48, 116, 50, 87], collateral)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `getTotalReceivables` (0xa56a7f59) function
        pub fn get_total_receivables(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([165, 106, 127, 89], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `gohm` (0x0690b59e) function
        pub fn gohm(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<
            M,
            ::ethers::core::types::Address,
        > {
            self.0
                .method_hash([6, 144, 181, 158], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `interestForLoan` (0xe37d16f8) function
        pub fn interest_for_loan(
            &self,
            principal: ::ethers::core::types::U256,
            duration: ::ethers::core::types::U256,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([227, 125, 22, 248], (principal, duration))
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `interestReceivables` (0x017f1f44) function
        pub fn interest_receivables(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([1, 127, 31, 68], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `isActive` (0x22f3e2d4) function
        pub fn is_active(&self) -> ::ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([34, 243, 226, 212], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `isCoolerCallback` (0x2a471e25) function
        pub fn is_cooler_callback(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([42, 71, 30, 37], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `kernel` (0xd4aae0c4) function
        pub fn kernel(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<
            M,
            ::ethers::core::types::Address,
        > {
            self.0
                .method_hash([212, 170, 224, 196], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `lendToCooler` (0x0d88a507) function
        pub fn lend_to_cooler(
            &self,
            cooler: ::ethers::core::types::Address,
            amount: ::ethers::core::types::U256,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([13, 136, 165, 7], (cooler, amount))
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `ohm` (0x02b1d239) function
        pub fn ohm(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<
            M,
            ::ethers::core::types::Address,
        > {
            self.0
                .method_hash([2, 177, 210, 57], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `onDefault` (0x4b84126a) function
        pub fn on_default(
            &self,
            loan_id: ::ethers::core::types::U256,
            principle: ::ethers::core::types::U256,
            interest: ::ethers::core::types::U256,
            collateral: ::ethers::core::types::U256,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash(
                    [75, 132, 18, 106],
                    (loan_id, principle, interest, collateral),
                )
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `onRepay` (0xb6278e81) function
        pub fn on_repay(
            &self,
            loan_id: ::ethers::core::types::U256,
            principle_paid: ::ethers::core::types::U256,
            interest_paid: ::ethers::core::types::U256,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash(
                    [182, 39, 142, 129],
                    (loan_id, principle_paid, interest_paid),
                )
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `principalReceivables` (0x09cfa2ee) function
        pub fn principal_receivables(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([9, 207, 162, 238], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `reactivate` (0xd18611d6) function
        pub fn reactivate(&self) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([209, 134, 17, 214], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `rebalance` (0x7d7c2a1c) function
        pub fn rebalance(&self) -> ::ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([125, 124, 42, 28], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `requestPermissions` (0x5924be70) function
        pub fn request_permissions(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<
            M,
            ::std::vec::Vec<Permissions>,
        > {
            self.0
                .method_hash([89, 36, 190, 112], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `sdai` (0x5b2eeca4) function
        pub fn sdai(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<
            M,
            ::ethers::core::types::Address,
        > {
            self.0
                .method_hash([91, 46, 236, 164], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `staking` (0x4cf088d9) function
        pub fn staking(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<
            M,
            ::ethers::core::types::Address,
        > {
            self.0
                .method_hash([76, 240, 136, 217], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `sweepIntoDSR` (0xc51d8536) function
        pub fn sweep_into_dsr(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([197, 29, 133, 54], ())
                .expect("method not found (this should never happen)")
        }
        ///Gets the contract's `Deactivate` event
        pub fn deactivate_filter(
            &self,
        ) -> ::ethers::contract::builders::Event<
            ::std::sync::Arc<M>,
            M,
            DeactivateFilter,
        > {
            self.0.event()
        }
        ///Gets the contract's `Defund` event
        pub fn defund_filter(
            &self,
        ) -> ::ethers::contract::builders::Event<::std::sync::Arc<M>, M, DefundFilter> {
            self.0.event()
        }
        ///Gets the contract's `Reactivate` event
        pub fn reactivate_filter(
            &self,
        ) -> ::ethers::contract::builders::Event<
            ::std::sync::Arc<M>,
            M,
            ReactivateFilter,
        > {
            self.0.event()
        }
        ///Gets the contract's `Rebalance` event
        pub fn rebalance_filter(
            &self,
        ) -> ::ethers::contract::builders::Event<
            ::std::sync::Arc<M>,
            M,
            RebalanceFilter,
        > {
            self.0.event()
        }
        /// Returns an `Event` builder for all the events of this contract.
        pub fn events(
            &self,
        ) -> ::ethers::contract::builders::Event<
            ::std::sync::Arc<M>,
            M,
            ClearinghouseEvents,
        > {
            self.0.event_with_filter(::core::default::Default::default())
        }
    }
    impl<M: ::ethers::providers::Middleware> From<::ethers::contract::Contract<M>>
    for Clearinghouse<M> {
        fn from(contract: ::ethers::contract::Contract<M>) -> Self {
            Self::new(contract.address(), contract.client())
        }
    }
    ///Custom Error type `BadEscrow` with signature `BadEscrow()` and selector `0x551febe9`
    #[derive(
        Clone,
        ::ethers::contract::EthError,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[etherror(name = "BadEscrow", abi = "BadEscrow()")]
    pub struct BadEscrow;
    ///Custom Error type `DurationMaximum` with signature `DurationMaximum()` and selector `0x88c143bc`
    #[derive(
        Clone,
        ::ethers::contract::EthError,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[etherror(name = "DurationMaximum", abi = "DurationMaximum()")]
    pub struct DurationMaximum;
    ///Custom Error type `KernelAdapter_OnlyKernel` with signature `KernelAdapter_OnlyKernel(address)` and selector `0x14fa403c`
    #[derive(
        Clone,
        ::ethers::contract::EthError,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[etherror(
        name = "KernelAdapter_OnlyKernel",
        abi = "KernelAdapter_OnlyKernel(address)"
    )]
    pub struct KernelAdapter_OnlyKernel {
        pub caller: ::ethers::core::types::Address,
    }
    ///Custom Error type `LengthDiscrepancy` with signature `LengthDiscrepancy()` and selector `0x1700bfef`
    #[derive(
        Clone,
        ::ethers::contract::EthError,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[etherror(name = "LengthDiscrepancy", abi = "LengthDiscrepancy()")]
    pub struct LengthDiscrepancy;
    ///Custom Error type `NotLender` with signature `NotLender()` and selector `0x8c380003`
    #[derive(
        Clone,
        ::ethers::contract::EthError,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[etherror(name = "NotLender", abi = "NotLender()")]
    pub struct NotLender;
    ///Custom Error type `OnlyBorrower` with signature `OnlyBorrower()` and selector `0x0ac9915d`
    #[derive(
        Clone,
        ::ethers::contract::EthError,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[etherror(name = "OnlyBorrower", abi = "OnlyBorrower()")]
    pub struct OnlyBorrower;
    ///Custom Error type `OnlyBurnable` with signature `OnlyBurnable()` and selector `0x23286f09`
    #[derive(
        Clone,
        ::ethers::contract::EthError,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[etherror(name = "OnlyBurnable", abi = "OnlyBurnable()")]
    pub struct OnlyBurnable;
    ///Custom Error type `OnlyFromFactory` with signature `OnlyFromFactory()` and selector `0x6f2c0c01`
    #[derive(
        Clone,
        ::ethers::contract::EthError,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[etherror(name = "OnlyFromFactory", abi = "OnlyFromFactory()")]
    pub struct OnlyFromFactory;
    ///Custom Error type `Policy_ModuleDoesNotExist` with signature `Policy_ModuleDoesNotExist(bytes5)` and selector `0x5c3fa9cd`
    #[derive(
        Clone,
        ::ethers::contract::EthError,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[etherror(
        name = "Policy_ModuleDoesNotExist",
        abi = "Policy_ModuleDoesNotExist(bytes5)"
    )]
    pub struct Policy_ModuleDoesNotExist {
        pub keycode: [u8; 5],
    }
    ///Custom Error type `TooEarlyToFund` with signature `TooEarlyToFund()` and selector `0xe5416935`
    #[derive(
        Clone,
        ::ethers::contract::EthError,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[etherror(name = "TooEarlyToFund", abi = "TooEarlyToFund()")]
    pub struct TooEarlyToFund;
    ///Container type for all of the contract's custom errors
    #[derive(Clone, ::ethers::contract::EthAbiType, Debug, PartialEq, Eq, Hash)]
    pub enum ClearinghouseErrors {
        BadEscrow(BadEscrow),
        DurationMaximum(DurationMaximum),
        KernelAdapter_OnlyKernel(KernelAdapter_OnlyKernel),
        LengthDiscrepancy(LengthDiscrepancy),
        NotLender(NotLender),
        OnlyBorrower(OnlyBorrower),
        OnlyBurnable(OnlyBurnable),
        OnlyFromFactory(OnlyFromFactory),
        Policy_ModuleDoesNotExist(Policy_ModuleDoesNotExist),
        TooEarlyToFund(TooEarlyToFund),
        /// The standard solidity revert string, with selector
        /// Error(string) -- 0x08c379a0
        RevertString(::std::string::String),
    }
    impl ::ethers::core::abi::AbiDecode for ClearinghouseErrors {
        fn decode(
            data: impl AsRef<[u8]>,
        ) -> ::core::result::Result<Self, ::ethers::core::abi::AbiError> {
            let data = data.as_ref();
            if let Ok(decoded) = <::std::string::String as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::RevertString(decoded));
            }
            if let Ok(decoded) = <BadEscrow as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::BadEscrow(decoded));
            }
            if let Ok(decoded) = <DurationMaximum as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::DurationMaximum(decoded));
            }
            if let Ok(decoded) = <KernelAdapter_OnlyKernel as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::KernelAdapter_OnlyKernel(decoded));
            }
            if let Ok(decoded) = <LengthDiscrepancy as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::LengthDiscrepancy(decoded));
            }
            if let Ok(decoded) = <NotLender as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::NotLender(decoded));
            }
            if let Ok(decoded) = <OnlyBorrower as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::OnlyBorrower(decoded));
            }
            if let Ok(decoded) = <OnlyBurnable as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::OnlyBurnable(decoded));
            }
            if let Ok(decoded) = <OnlyFromFactory as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::OnlyFromFactory(decoded));
            }
            if let Ok(decoded) = <Policy_ModuleDoesNotExist as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::Policy_ModuleDoesNotExist(decoded));
            }
            if let Ok(decoded) = <TooEarlyToFund as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::TooEarlyToFund(decoded));
            }
            Err(::ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ::ethers::core::abi::AbiEncode for ClearinghouseErrors {
        fn encode(self) -> ::std::vec::Vec<u8> {
            match self {
                Self::BadEscrow(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::DurationMaximum(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::KernelAdapter_OnlyKernel(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::LengthDiscrepancy(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::NotLender(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::OnlyBorrower(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::OnlyBurnable(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::OnlyFromFactory(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::Policy_ModuleDoesNotExist(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::TooEarlyToFund(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::RevertString(s) => ::ethers::core::abi::AbiEncode::encode(s),
            }
        }
    }
    impl ::ethers::contract::ContractRevert for ClearinghouseErrors {
        fn valid_selector(selector: [u8; 4]) -> bool {
            match selector {
                [0x08, 0xc3, 0x79, 0xa0] => true,
                _ if selector
                    == <BadEscrow as ::ethers::contract::EthError>::selector() => true,
                _ if selector
                    == <DurationMaximum as ::ethers::contract::EthError>::selector() => {
                    true
                }
                _ if selector
                    == <KernelAdapter_OnlyKernel as ::ethers::contract::EthError>::selector() => {
                    true
                }
                _ if selector
                    == <LengthDiscrepancy as ::ethers::contract::EthError>::selector() => {
                    true
                }
                _ if selector
                    == <NotLender as ::ethers::contract::EthError>::selector() => true,
                _ if selector
                    == <OnlyBorrower as ::ethers::contract::EthError>::selector() => true,
                _ if selector
                    == <OnlyBurnable as ::ethers::contract::EthError>::selector() => true,
                _ if selector
                    == <OnlyFromFactory as ::ethers::contract::EthError>::selector() => {
                    true
                }
                _ if selector
                    == <Policy_ModuleDoesNotExist as ::ethers::contract::EthError>::selector() => {
                    true
                }
                _ if selector
                    == <TooEarlyToFund as ::ethers::contract::EthError>::selector() => {
                    true
                }
                _ => false,
            }
        }
    }
    impl ::core::fmt::Display for ClearinghouseErrors {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
                Self::BadEscrow(element) => ::core::fmt::Display::fmt(element, f),
                Self::DurationMaximum(element) => ::core::fmt::Display::fmt(element, f),
                Self::KernelAdapter_OnlyKernel(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
                Self::LengthDiscrepancy(element) => ::core::fmt::Display::fmt(element, f),
                Self::NotLender(element) => ::core::fmt::Display::fmt(element, f),
                Self::OnlyBorrower(element) => ::core::fmt::Display::fmt(element, f),
                Self::OnlyBurnable(element) => ::core::fmt::Display::fmt(element, f),
                Self::OnlyFromFactory(element) => ::core::fmt::Display::fmt(element, f),
                Self::Policy_ModuleDoesNotExist(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
                Self::TooEarlyToFund(element) => ::core::fmt::Display::fmt(element, f),
                Self::RevertString(s) => ::core::fmt::Display::fmt(s, f),
            }
        }
    }
    impl ::core::convert::From<::std::string::String> for ClearinghouseErrors {
        fn from(value: String) -> Self {
            Self::RevertString(value)
        }
    }
    impl ::core::convert::From<BadEscrow> for ClearinghouseErrors {
        fn from(value: BadEscrow) -> Self {
            Self::BadEscrow(value)
        }
    }
    impl ::core::convert::From<DurationMaximum> for ClearinghouseErrors {
        fn from(value: DurationMaximum) -> Self {
            Self::DurationMaximum(value)
        }
    }
    impl ::core::convert::From<KernelAdapter_OnlyKernel> for ClearinghouseErrors {
        fn from(value: KernelAdapter_OnlyKernel) -> Self {
            Self::KernelAdapter_OnlyKernel(value)
        }
    }
    impl ::core::convert::From<LengthDiscrepancy> for ClearinghouseErrors {
        fn from(value: LengthDiscrepancy) -> Self {
            Self::LengthDiscrepancy(value)
        }
    }
    impl ::core::convert::From<NotLender> for ClearinghouseErrors {
        fn from(value: NotLender) -> Self {
            Self::NotLender(value)
        }
    }
    impl ::core::convert::From<OnlyBorrower> for ClearinghouseErrors {
        fn from(value: OnlyBorrower) -> Self {
            Self::OnlyBorrower(value)
        }
    }
    impl ::core::convert::From<OnlyBurnable> for ClearinghouseErrors {
        fn from(value: OnlyBurnable) -> Self {
            Self::OnlyBurnable(value)
        }
    }
    impl ::core::convert::From<OnlyFromFactory> for ClearinghouseErrors {
        fn from(value: OnlyFromFactory) -> Self {
            Self::OnlyFromFactory(value)
        }
    }
    impl ::core::convert::From<Policy_ModuleDoesNotExist> for ClearinghouseErrors {
        fn from(value: Policy_ModuleDoesNotExist) -> Self {
            Self::Policy_ModuleDoesNotExist(value)
        }
    }
    impl ::core::convert::From<TooEarlyToFund> for ClearinghouseErrors {
        fn from(value: TooEarlyToFund) -> Self {
            Self::TooEarlyToFund(value)
        }
    }
    #[derive(
        Clone,
        ::ethers::contract::EthEvent,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethevent(name = "Deactivate", abi = "Deactivate()")]
    pub struct DeactivateFilter;
    #[derive(
        Clone,
        ::ethers::contract::EthEvent,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethevent(name = "Defund", abi = "Defund(address,uint256)")]
    pub struct DefundFilter {
        pub token: ::ethers::core::types::Address,
        pub amount: ::ethers::core::types::U256,
    }
    #[derive(
        Clone,
        ::ethers::contract::EthEvent,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethevent(name = "Reactivate", abi = "Reactivate()")]
    pub struct ReactivateFilter;
    #[derive(
        Clone,
        ::ethers::contract::EthEvent,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethevent(name = "Rebalance", abi = "Rebalance(bool,uint256)")]
    pub struct RebalanceFilter {
        pub defund: bool,
        pub dai_amount: ::ethers::core::types::U256,
    }
    ///Container type for all of the contract's events
    #[derive(Clone, ::ethers::contract::EthAbiType, Debug, PartialEq, Eq, Hash)]
    pub enum ClearinghouseEvents {
        DeactivateFilter(DeactivateFilter),
        DefundFilter(DefundFilter),
        ReactivateFilter(ReactivateFilter),
        RebalanceFilter(RebalanceFilter),
    }
    impl ::ethers::contract::EthLogDecode for ClearinghouseEvents {
        fn decode_log(
            log: &::ethers::core::abi::RawLog,
        ) -> ::core::result::Result<Self, ::ethers::core::abi::Error> {
            if let Ok(decoded) = DeactivateFilter::decode_log(log) {
                return Ok(ClearinghouseEvents::DeactivateFilter(decoded));
            }
            if let Ok(decoded) = DefundFilter::decode_log(log) {
                return Ok(ClearinghouseEvents::DefundFilter(decoded));
            }
            if let Ok(decoded) = ReactivateFilter::decode_log(log) {
                return Ok(ClearinghouseEvents::ReactivateFilter(decoded));
            }
            if let Ok(decoded) = RebalanceFilter::decode_log(log) {
                return Ok(ClearinghouseEvents::RebalanceFilter(decoded));
            }
            Err(::ethers::core::abi::Error::InvalidData)
        }
    }
    impl ::core::fmt::Display for ClearinghouseEvents {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
                Self::DeactivateFilter(element) => ::core::fmt::Display::fmt(element, f),
                Self::DefundFilter(element) => ::core::fmt::Display::fmt(element, f),
                Self::ReactivateFilter(element) => ::core::fmt::Display::fmt(element, f),
                Self::RebalanceFilter(element) => ::core::fmt::Display::fmt(element, f),
            }
        }
    }
    impl ::core::convert::From<DeactivateFilter> for ClearinghouseEvents {
        fn from(value: DeactivateFilter) -> Self {
            Self::DeactivateFilter(value)
        }
    }
    impl ::core::convert::From<DefundFilter> for ClearinghouseEvents {
        fn from(value: DefundFilter) -> Self {
            Self::DefundFilter(value)
        }
    }
    impl ::core::convert::From<ReactivateFilter> for ClearinghouseEvents {
        fn from(value: ReactivateFilter) -> Self {
            Self::ReactivateFilter(value)
        }
    }
    impl ::core::convert::From<RebalanceFilter> for ClearinghouseEvents {
        fn from(value: RebalanceFilter) -> Self {
            Self::RebalanceFilter(value)
        }
    }
    ///Container type for all input parameters for the `DURATION` function with signature `DURATION()` and selector `0x1be05289`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "DURATION", abi = "DURATION()")]
    pub struct DurationCall;
    ///Container type for all input parameters for the `FUND_AMOUNT` function with signature `FUND_AMOUNT()` and selector `0x1accd130`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "FUND_AMOUNT", abi = "FUND_AMOUNT()")]
    pub struct FundAmountCall;
    ///Container type for all input parameters for the `FUND_CADENCE` function with signature `FUND_CADENCE()` and selector `0x7b30f405`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "FUND_CADENCE", abi = "FUND_CADENCE()")]
    pub struct FundCadenceCall;
    ///Container type for all input parameters for the `INTEREST_RATE` function with signature `INTEREST_RATE()` and selector `0x5b72a33a`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "INTEREST_RATE", abi = "INTEREST_RATE()")]
    pub struct InterestRateCall;
    ///Container type for all input parameters for the `LOAN_TO_COLLATERAL` function with signature `LOAN_TO_COLLATERAL()` and selector `0x4db71fc9`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "LOAN_TO_COLLATERAL", abi = "LOAN_TO_COLLATERAL()")]
    pub struct LoanToCollateralCall;
    ///Container type for all input parameters for the `MAX_REWARD` function with signature `MAX_REWARD()` and selector `0x0e1505e0`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "MAX_REWARD", abi = "MAX_REWARD()")]
    pub struct MaxRewardCall;
    ///Container type for all input parameters for the `MINTR` function with signature `MINTR()` and selector `0x577de7d0`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "MINTR", abi = "MINTR()")]
    pub struct MintrCall;
    ///Container type for all input parameters for the `ROLES` function with signature `ROLES()` and selector `0x923cb952`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "ROLES", abi = "ROLES()")]
    pub struct RolesCall;
    ///Container type for all input parameters for the `TRSRY` function with signature `TRSRY()` and selector `0x80cee4ab`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "TRSRY", abi = "TRSRY()")]
    pub struct TrsryCall;
    ///Container type for all input parameters for the `active` function with signature `active()` and selector `0x02fb0c5e`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "active", abi = "active()")]
    pub struct ActiveCall;
    ///Container type for all input parameters for the `burn` function with signature `burn()` and selector `0x44df8e70`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "burn", abi = "burn()")]
    pub struct BurnCall;
    ///Container type for all input parameters for the `changeKernel` function with signature `changeKernel(address)` and selector `0x4657b36c`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "changeKernel", abi = "changeKernel(address)")]
    pub struct ChangeKernelCall {
        pub new_kernel: ::ethers::core::types::Address,
    }
    ///Container type for all input parameters for the `claimDefaulted` function with signature `claimDefaulted(address[],uint256[])` and selector `0x6cab0074`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "claimDefaulted", abi = "claimDefaulted(address[],uint256[])")]
    pub struct ClaimDefaultedCall {
        pub coolers: ::std::vec::Vec<::ethers::core::types::Address>,
        pub loans: ::std::vec::Vec<::ethers::core::types::U256>,
    }
    ///Container type for all input parameters for the `configureDependencies` function with signature `configureDependencies()` and selector `0x9459b875`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "configureDependencies", abi = "configureDependencies()")]
    pub struct ConfigureDependenciesCall;
    ///Container type for all input parameters for the `dai` function with signature `dai()` and selector `0xf4b9fa75`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "dai", abi = "dai()")]
    pub struct DaiCall;
    ///Container type for all input parameters for the `defund` function with signature `defund(address,uint256)` and selector `0xb3c6326b`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "defund", abi = "defund(address,uint256)")]
    pub struct DefundCall {
        pub token: ::ethers::core::types::Address,
        pub amount: ::ethers::core::types::U256,
    }
    ///Container type for all input parameters for the `emergencyShutdown` function with signature `emergencyShutdown()` and selector `0x3403c2fc`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "emergencyShutdown", abi = "emergencyShutdown()")]
    pub struct EmergencyShutdownCall;
    ///Container type for all input parameters for the `extendLoan` function with signature `extendLoan(address,uint256,uint8)` and selector `0x23831b77`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "extendLoan", abi = "extendLoan(address,uint256,uint8)")]
    pub struct ExtendLoanCall {
        pub cooler: ::ethers::core::types::Address,
        pub loan_id: ::ethers::core::types::U256,
        pub times: u8,
    }
    ///Container type for all input parameters for the `factory` function with signature `factory()` and selector `0xc45a0155`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "factory", abi = "factory()")]
    pub struct FactoryCall;
    ///Container type for all input parameters for the `fundTime` function with signature `fundTime()` and selector `0xe7cc298e`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "fundTime", abi = "fundTime()")]
    pub struct FundTimeCall;
    ///Container type for all input parameters for the `getCollateralForLoan` function with signature `getCollateralForLoan(uint256)` and selector `0x79904e4c`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "getCollateralForLoan", abi = "getCollateralForLoan(uint256)")]
    pub struct GetCollateralForLoanCall {
        pub principal: ::ethers::core::types::U256,
    }
    ///Container type for all input parameters for the `getLoanForCollateral` function with signature `getLoanForCollateral(uint256)` and selector `0x30743257`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "getLoanForCollateral", abi = "getLoanForCollateral(uint256)")]
    pub struct GetLoanForCollateralCall {
        pub collateral: ::ethers::core::types::U256,
    }
    ///Container type for all input parameters for the `getTotalReceivables` function with signature `getTotalReceivables()` and selector `0xa56a7f59`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "getTotalReceivables", abi = "getTotalReceivables()")]
    pub struct GetTotalReceivablesCall;
    ///Container type for all input parameters for the `gohm` function with signature `gohm()` and selector `0x0690b59e`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "gohm", abi = "gohm()")]
    pub struct GohmCall;
    ///Container type for all input parameters for the `interestForLoan` function with signature `interestForLoan(uint256,uint256)` and selector `0xe37d16f8`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "interestForLoan", abi = "interestForLoan(uint256,uint256)")]
    pub struct InterestForLoanCall {
        pub principal: ::ethers::core::types::U256,
        pub duration: ::ethers::core::types::U256,
    }
    ///Container type for all input parameters for the `interestReceivables` function with signature `interestReceivables()` and selector `0x017f1f44`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "interestReceivables", abi = "interestReceivables()")]
    pub struct InterestReceivablesCall;
    ///Container type for all input parameters for the `isActive` function with signature `isActive()` and selector `0x22f3e2d4`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "isActive", abi = "isActive()")]
    pub struct IsActiveCall;
    ///Container type for all input parameters for the `isCoolerCallback` function with signature `isCoolerCallback()` and selector `0x2a471e25`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "isCoolerCallback", abi = "isCoolerCallback()")]
    pub struct IsCoolerCallbackCall;
    ///Container type for all input parameters for the `kernel` function with signature `kernel()` and selector `0xd4aae0c4`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "kernel", abi = "kernel()")]
    pub struct KernelCall;
    ///Container type for all input parameters for the `lendToCooler` function with signature `lendToCooler(address,uint256)` and selector `0x0d88a507`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "lendToCooler", abi = "lendToCooler(address,uint256)")]
    pub struct LendToCoolerCall {
        pub cooler: ::ethers::core::types::Address,
        pub amount: ::ethers::core::types::U256,
    }
    ///Container type for all input parameters for the `ohm` function with signature `ohm()` and selector `0x02b1d239`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "ohm", abi = "ohm()")]
    pub struct OhmCall;
    ///Container type for all input parameters for the `onDefault` function with signature `onDefault(uint256,uint256,uint256,uint256)` and selector `0x4b84126a`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "onDefault", abi = "onDefault(uint256,uint256,uint256,uint256)")]
    pub struct OnDefaultCall {
        pub loan_id: ::ethers::core::types::U256,
        pub principle: ::ethers::core::types::U256,
        pub interest: ::ethers::core::types::U256,
        pub collateral: ::ethers::core::types::U256,
    }
    ///Container type for all input parameters for the `onRepay` function with signature `onRepay(uint256,uint256,uint256)` and selector `0xb6278e81`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "onRepay", abi = "onRepay(uint256,uint256,uint256)")]
    pub struct OnRepayCall {
        pub loan_id: ::ethers::core::types::U256,
        pub principle_paid: ::ethers::core::types::U256,
        pub interest_paid: ::ethers::core::types::U256,
    }
    ///Container type for all input parameters for the `principalReceivables` function with signature `principalReceivables()` and selector `0x09cfa2ee`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "principalReceivables", abi = "principalReceivables()")]
    pub struct PrincipalReceivablesCall;
    ///Container type for all input parameters for the `reactivate` function with signature `reactivate()` and selector `0xd18611d6`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "reactivate", abi = "reactivate()")]
    pub struct ReactivateCall;
    ///Container type for all input parameters for the `rebalance` function with signature `rebalance()` and selector `0x7d7c2a1c`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "rebalance", abi = "rebalance()")]
    pub struct RebalanceCall;
    ///Container type for all input parameters for the `requestPermissions` function with signature `requestPermissions()` and selector `0x5924be70`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "requestPermissions", abi = "requestPermissions()")]
    pub struct RequestPermissionsCall;
    ///Container type for all input parameters for the `sdai` function with signature `sdai()` and selector `0x5b2eeca4`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "sdai", abi = "sdai()")]
    pub struct SdaiCall;
    ///Container type for all input parameters for the `staking` function with signature `staking()` and selector `0x4cf088d9`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "staking", abi = "staking()")]
    pub struct StakingCall;
    ///Container type for all input parameters for the `sweepIntoDSR` function with signature `sweepIntoDSR()` and selector `0xc51d8536`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "sweepIntoDSR", abi = "sweepIntoDSR()")]
    pub struct SweepIntoDSRCall;
    ///Container type for all of the contract's call
    #[derive(Clone, ::ethers::contract::EthAbiType, Debug, PartialEq, Eq, Hash)]
    pub enum ClearinghouseCalls {
        Duration(DurationCall),
        FundAmount(FundAmountCall),
        FundCadence(FundCadenceCall),
        InterestRate(InterestRateCall),
        LoanToCollateral(LoanToCollateralCall),
        MaxReward(MaxRewardCall),
        Mintr(MintrCall),
        Roles(RolesCall),
        Trsry(TrsryCall),
        Active(ActiveCall),
        Burn(BurnCall),
        ChangeKernel(ChangeKernelCall),
        ClaimDefaulted(ClaimDefaultedCall),
        ConfigureDependencies(ConfigureDependenciesCall),
        Dai(DaiCall),
        Defund(DefundCall),
        EmergencyShutdown(EmergencyShutdownCall),
        ExtendLoan(ExtendLoanCall),
        Factory(FactoryCall),
        FundTime(FundTimeCall),
        GetCollateralForLoan(GetCollateralForLoanCall),
        GetLoanForCollateral(GetLoanForCollateralCall),
        GetTotalReceivables(GetTotalReceivablesCall),
        Gohm(GohmCall),
        InterestForLoan(InterestForLoanCall),
        InterestReceivables(InterestReceivablesCall),
        IsActive(IsActiveCall),
        IsCoolerCallback(IsCoolerCallbackCall),
        Kernel(KernelCall),
        LendToCooler(LendToCoolerCall),
        Ohm(OhmCall),
        OnDefault(OnDefaultCall),
        OnRepay(OnRepayCall),
        PrincipalReceivables(PrincipalReceivablesCall),
        Reactivate(ReactivateCall),
        Rebalance(RebalanceCall),
        RequestPermissions(RequestPermissionsCall),
        Sdai(SdaiCall),
        Staking(StakingCall),
        SweepIntoDSR(SweepIntoDSRCall),
    }
    impl ::ethers::core::abi::AbiDecode for ClearinghouseCalls {
        fn decode(
            data: impl AsRef<[u8]>,
        ) -> ::core::result::Result<Self, ::ethers::core::abi::AbiError> {
            let data = data.as_ref();
            if let Ok(decoded) = <DurationCall as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::Duration(decoded));
            }
            if let Ok(decoded) = <FundAmountCall as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::FundAmount(decoded));
            }
            if let Ok(decoded) = <FundCadenceCall as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::FundCadence(decoded));
            }
            if let Ok(decoded) = <InterestRateCall as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::InterestRate(decoded));
            }
            if let Ok(decoded) = <LoanToCollateralCall as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::LoanToCollateral(decoded));
            }
            if let Ok(decoded) = <MaxRewardCall as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::MaxReward(decoded));
            }
            if let Ok(decoded) = <MintrCall as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::Mintr(decoded));
            }
            if let Ok(decoded) = <RolesCall as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::Roles(decoded));
            }
            if let Ok(decoded) = <TrsryCall as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::Trsry(decoded));
            }
            if let Ok(decoded) = <ActiveCall as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::Active(decoded));
            }
            if let Ok(decoded) = <BurnCall as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::Burn(decoded));
            }
            if let Ok(decoded) = <ChangeKernelCall as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::ChangeKernel(decoded));
            }
            if let Ok(decoded) = <ClaimDefaultedCall as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::ClaimDefaulted(decoded));
            }
            if let Ok(decoded) = <ConfigureDependenciesCall as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::ConfigureDependencies(decoded));
            }
            if let Ok(decoded) = <DaiCall as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::Dai(decoded));
            }
            if let Ok(decoded) = <DefundCall as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::Defund(decoded));
            }
            if let Ok(decoded) = <EmergencyShutdownCall as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::EmergencyShutdown(decoded));
            }
            if let Ok(decoded) = <ExtendLoanCall as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::ExtendLoan(decoded));
            }
            if let Ok(decoded) = <FactoryCall as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::Factory(decoded));
            }
            if let Ok(decoded) = <FundTimeCall as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::FundTime(decoded));
            }
            if let Ok(decoded) = <GetCollateralForLoanCall as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::GetCollateralForLoan(decoded));
            }
            if let Ok(decoded) = <GetLoanForCollateralCall as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::GetLoanForCollateral(decoded));
            }
            if let Ok(decoded) = <GetTotalReceivablesCall as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::GetTotalReceivables(decoded));
            }
            if let Ok(decoded) = <GohmCall as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::Gohm(decoded));
            }
            if let Ok(decoded) = <InterestForLoanCall as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::InterestForLoan(decoded));
            }
            if let Ok(decoded) = <InterestReceivablesCall as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::InterestReceivables(decoded));
            }
            if let Ok(decoded) = <IsActiveCall as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::IsActive(decoded));
            }
            if let Ok(decoded) = <IsCoolerCallbackCall as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::IsCoolerCallback(decoded));
            }
            if let Ok(decoded) = <KernelCall as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::Kernel(decoded));
            }
            if let Ok(decoded) = <LendToCoolerCall as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::LendToCooler(decoded));
            }
            if let Ok(decoded) = <OhmCall as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::Ohm(decoded));
            }
            if let Ok(decoded) = <OnDefaultCall as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::OnDefault(decoded));
            }
            if let Ok(decoded) = <OnRepayCall as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::OnRepay(decoded));
            }
            if let Ok(decoded) = <PrincipalReceivablesCall as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::PrincipalReceivables(decoded));
            }
            if let Ok(decoded) = <ReactivateCall as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::Reactivate(decoded));
            }
            if let Ok(decoded) = <RebalanceCall as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::Rebalance(decoded));
            }
            if let Ok(decoded) = <RequestPermissionsCall as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::RequestPermissions(decoded));
            }
            if let Ok(decoded) = <SdaiCall as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::Sdai(decoded));
            }
            if let Ok(decoded) = <StakingCall as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::Staking(decoded));
            }
            if let Ok(decoded) = <SweepIntoDSRCall as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::SweepIntoDSR(decoded));
            }
            Err(::ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ::ethers::core::abi::AbiEncode for ClearinghouseCalls {
        fn encode(self) -> Vec<u8> {
            match self {
                Self::Duration(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::FundAmount(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::FundCadence(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::InterestRate(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::LoanToCollateral(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::MaxReward(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::Mintr(element) => ::ethers::core::abi::AbiEncode::encode(element),
                Self::Roles(element) => ::ethers::core::abi::AbiEncode::encode(element),
                Self::Trsry(element) => ::ethers::core::abi::AbiEncode::encode(element),
                Self::Active(element) => ::ethers::core::abi::AbiEncode::encode(element),
                Self::Burn(element) => ::ethers::core::abi::AbiEncode::encode(element),
                Self::ChangeKernel(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::ClaimDefaulted(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::ConfigureDependencies(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::Dai(element) => ::ethers::core::abi::AbiEncode::encode(element),
                Self::Defund(element) => ::ethers::core::abi::AbiEncode::encode(element),
                Self::EmergencyShutdown(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::ExtendLoan(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::Factory(element) => ::ethers::core::abi::AbiEncode::encode(element),
                Self::FundTime(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::GetCollateralForLoan(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::GetLoanForCollateral(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::GetTotalReceivables(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::Gohm(element) => ::ethers::core::abi::AbiEncode::encode(element),
                Self::InterestForLoan(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::InterestReceivables(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::IsActive(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::IsCoolerCallback(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::Kernel(element) => ::ethers::core::abi::AbiEncode::encode(element),
                Self::LendToCooler(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::Ohm(element) => ::ethers::core::abi::AbiEncode::encode(element),
                Self::OnDefault(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::OnRepay(element) => ::ethers::core::abi::AbiEncode::encode(element),
                Self::PrincipalReceivables(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::Reactivate(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::Rebalance(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::RequestPermissions(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::Sdai(element) => ::ethers::core::abi::AbiEncode::encode(element),
                Self::Staking(element) => ::ethers::core::abi::AbiEncode::encode(element),
                Self::SweepIntoDSR(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
            }
        }
    }
    impl ::core::fmt::Display for ClearinghouseCalls {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
                Self::Duration(element) => ::core::fmt::Display::fmt(element, f),
                Self::FundAmount(element) => ::core::fmt::Display::fmt(element, f),
                Self::FundCadence(element) => ::core::fmt::Display::fmt(element, f),
                Self::InterestRate(element) => ::core::fmt::Display::fmt(element, f),
                Self::LoanToCollateral(element) => ::core::fmt::Display::fmt(element, f),
                Self::MaxReward(element) => ::core::fmt::Display::fmt(element, f),
                Self::Mintr(element) => ::core::fmt::Display::fmt(element, f),
                Self::Roles(element) => ::core::fmt::Display::fmt(element, f),
                Self::Trsry(element) => ::core::fmt::Display::fmt(element, f),
                Self::Active(element) => ::core::fmt::Display::fmt(element, f),
                Self::Burn(element) => ::core::fmt::Display::fmt(element, f),
                Self::ChangeKernel(element) => ::core::fmt::Display::fmt(element, f),
                Self::ClaimDefaulted(element) => ::core::fmt::Display::fmt(element, f),
                Self::ConfigureDependencies(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
                Self::Dai(element) => ::core::fmt::Display::fmt(element, f),
                Self::Defund(element) => ::core::fmt::Display::fmt(element, f),
                Self::EmergencyShutdown(element) => ::core::fmt::Display::fmt(element, f),
                Self::ExtendLoan(element) => ::core::fmt::Display::fmt(element, f),
                Self::Factory(element) => ::core::fmt::Display::fmt(element, f),
                Self::FundTime(element) => ::core::fmt::Display::fmt(element, f),
                Self::GetCollateralForLoan(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
                Self::GetLoanForCollateral(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
                Self::GetTotalReceivables(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
                Self::Gohm(element) => ::core::fmt::Display::fmt(element, f),
                Self::InterestForLoan(element) => ::core::fmt::Display::fmt(element, f),
                Self::InterestReceivables(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
                Self::IsActive(element) => ::core::fmt::Display::fmt(element, f),
                Self::IsCoolerCallback(element) => ::core::fmt::Display::fmt(element, f),
                Self::Kernel(element) => ::core::fmt::Display::fmt(element, f),
                Self::LendToCooler(element) => ::core::fmt::Display::fmt(element, f),
                Self::Ohm(element) => ::core::fmt::Display::fmt(element, f),
                Self::OnDefault(element) => ::core::fmt::Display::fmt(element, f),
                Self::OnRepay(element) => ::core::fmt::Display::fmt(element, f),
                Self::PrincipalReceivables(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
                Self::Reactivate(element) => ::core::fmt::Display::fmt(element, f),
                Self::Rebalance(element) => ::core::fmt::Display::fmt(element, f),
                Self::RequestPermissions(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
                Self::Sdai(element) => ::core::fmt::Display::fmt(element, f),
                Self::Staking(element) => ::core::fmt::Display::fmt(element, f),
                Self::SweepIntoDSR(element) => ::core::fmt::Display::fmt(element, f),
            }
        }
    }
    impl ::core::convert::From<DurationCall> for ClearinghouseCalls {
        fn from(value: DurationCall) -> Self {
            Self::Duration(value)
        }
    }
    impl ::core::convert::From<FundAmountCall> for ClearinghouseCalls {
        fn from(value: FundAmountCall) -> Self {
            Self::FundAmount(value)
        }
    }
    impl ::core::convert::From<FundCadenceCall> for ClearinghouseCalls {
        fn from(value: FundCadenceCall) -> Self {
            Self::FundCadence(value)
        }
    }
    impl ::core::convert::From<InterestRateCall> for ClearinghouseCalls {
        fn from(value: InterestRateCall) -> Self {
            Self::InterestRate(value)
        }
    }
    impl ::core::convert::From<LoanToCollateralCall> for ClearinghouseCalls {
        fn from(value: LoanToCollateralCall) -> Self {
            Self::LoanToCollateral(value)
        }
    }
    impl ::core::convert::From<MaxRewardCall> for ClearinghouseCalls {
        fn from(value: MaxRewardCall) -> Self {
            Self::MaxReward(value)
        }
    }
    impl ::core::convert::From<MintrCall> for ClearinghouseCalls {
        fn from(value: MintrCall) -> Self {
            Self::Mintr(value)
        }
    }
    impl ::core::convert::From<RolesCall> for ClearinghouseCalls {
        fn from(value: RolesCall) -> Self {
            Self::Roles(value)
        }
    }
    impl ::core::convert::From<TrsryCall> for ClearinghouseCalls {
        fn from(value: TrsryCall) -> Self {
            Self::Trsry(value)
        }
    }
    impl ::core::convert::From<ActiveCall> for ClearinghouseCalls {
        fn from(value: ActiveCall) -> Self {
            Self::Active(value)
        }
    }
    impl ::core::convert::From<BurnCall> for ClearinghouseCalls {
        fn from(value: BurnCall) -> Self {
            Self::Burn(value)
        }
    }
    impl ::core::convert::From<ChangeKernelCall> for ClearinghouseCalls {
        fn from(value: ChangeKernelCall) -> Self {
            Self::ChangeKernel(value)
        }
    }
    impl ::core::convert::From<ClaimDefaultedCall> for ClearinghouseCalls {
        fn from(value: ClaimDefaultedCall) -> Self {
            Self::ClaimDefaulted(value)
        }
    }
    impl ::core::convert::From<ConfigureDependenciesCall> for ClearinghouseCalls {
        fn from(value: ConfigureDependenciesCall) -> Self {
            Self::ConfigureDependencies(value)
        }
    }
    impl ::core::convert::From<DaiCall> for ClearinghouseCalls {
        fn from(value: DaiCall) -> Self {
            Self::Dai(value)
        }
    }
    impl ::core::convert::From<DefundCall> for ClearinghouseCalls {
        fn from(value: DefundCall) -> Self {
            Self::Defund(value)
        }
    }
    impl ::core::convert::From<EmergencyShutdownCall> for ClearinghouseCalls {
        fn from(value: EmergencyShutdownCall) -> Self {
            Self::EmergencyShutdown(value)
        }
    }
    impl ::core::convert::From<ExtendLoanCall> for ClearinghouseCalls {
        fn from(value: ExtendLoanCall) -> Self {
            Self::ExtendLoan(value)
        }
    }
    impl ::core::convert::From<FactoryCall> for ClearinghouseCalls {
        fn from(value: FactoryCall) -> Self {
            Self::Factory(value)
        }
    }
    impl ::core::convert::From<FundTimeCall> for ClearinghouseCalls {
        fn from(value: FundTimeCall) -> Self {
            Self::FundTime(value)
        }
    }
    impl ::core::convert::From<GetCollateralForLoanCall> for ClearinghouseCalls {
        fn from(value: GetCollateralForLoanCall) -> Self {
            Self::GetCollateralForLoan(value)
        }
    }
    impl ::core::convert::From<GetLoanForCollateralCall> for ClearinghouseCalls {
        fn from(value: GetLoanForCollateralCall) -> Self {
            Self::GetLoanForCollateral(value)
        }
    }
    impl ::core::convert::From<GetTotalReceivablesCall> for ClearinghouseCalls {
        fn from(value: GetTotalReceivablesCall) -> Self {
            Self::GetTotalReceivables(value)
        }
    }
    impl ::core::convert::From<GohmCall> for ClearinghouseCalls {
        fn from(value: GohmCall) -> Self {
            Self::Gohm(value)
        }
    }
    impl ::core::convert::From<InterestForLoanCall> for ClearinghouseCalls {
        fn from(value: InterestForLoanCall) -> Self {
            Self::InterestForLoan(value)
        }
    }
    impl ::core::convert::From<InterestReceivablesCall> for ClearinghouseCalls {
        fn from(value: InterestReceivablesCall) -> Self {
            Self::InterestReceivables(value)
        }
    }
    impl ::core::convert::From<IsActiveCall> for ClearinghouseCalls {
        fn from(value: IsActiveCall) -> Self {
            Self::IsActive(value)
        }
    }
    impl ::core::convert::From<IsCoolerCallbackCall> for ClearinghouseCalls {
        fn from(value: IsCoolerCallbackCall) -> Self {
            Self::IsCoolerCallback(value)
        }
    }
    impl ::core::convert::From<KernelCall> for ClearinghouseCalls {
        fn from(value: KernelCall) -> Self {
            Self::Kernel(value)
        }
    }
    impl ::core::convert::From<LendToCoolerCall> for ClearinghouseCalls {
        fn from(value: LendToCoolerCall) -> Self {
            Self::LendToCooler(value)
        }
    }
    impl ::core::convert::From<OhmCall> for ClearinghouseCalls {
        fn from(value: OhmCall) -> Self {
            Self::Ohm(value)
        }
    }
    impl ::core::convert::From<OnDefaultCall> for ClearinghouseCalls {
        fn from(value: OnDefaultCall) -> Self {
            Self::OnDefault(value)
        }
    }
    impl ::core::convert::From<OnRepayCall> for ClearinghouseCalls {
        fn from(value: OnRepayCall) -> Self {
            Self::OnRepay(value)
        }
    }
    impl ::core::convert::From<PrincipalReceivablesCall> for ClearinghouseCalls {
        fn from(value: PrincipalReceivablesCall) -> Self {
            Self::PrincipalReceivables(value)
        }
    }
    impl ::core::convert::From<ReactivateCall> for ClearinghouseCalls {
        fn from(value: ReactivateCall) -> Self {
            Self::Reactivate(value)
        }
    }
    impl ::core::convert::From<RebalanceCall> for ClearinghouseCalls {
        fn from(value: RebalanceCall) -> Self {
            Self::Rebalance(value)
        }
    }
    impl ::core::convert::From<RequestPermissionsCall> for ClearinghouseCalls {
        fn from(value: RequestPermissionsCall) -> Self {
            Self::RequestPermissions(value)
        }
    }
    impl ::core::convert::From<SdaiCall> for ClearinghouseCalls {
        fn from(value: SdaiCall) -> Self {
            Self::Sdai(value)
        }
    }
    impl ::core::convert::From<StakingCall> for ClearinghouseCalls {
        fn from(value: StakingCall) -> Self {
            Self::Staking(value)
        }
    }
    impl ::core::convert::From<SweepIntoDSRCall> for ClearinghouseCalls {
        fn from(value: SweepIntoDSRCall) -> Self {
            Self::SweepIntoDSR(value)
        }
    }
    ///Container type for all return fields from the `DURATION` function with signature `DURATION()` and selector `0x1be05289`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct DurationReturn(pub ::ethers::core::types::U256);
    ///Container type for all return fields from the `FUND_AMOUNT` function with signature `FUND_AMOUNT()` and selector `0x1accd130`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct FundAmountReturn(pub ::ethers::core::types::U256);
    ///Container type for all return fields from the `FUND_CADENCE` function with signature `FUND_CADENCE()` and selector `0x7b30f405`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct FundCadenceReturn(pub ::ethers::core::types::U256);
    ///Container type for all return fields from the `INTEREST_RATE` function with signature `INTEREST_RATE()` and selector `0x5b72a33a`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct InterestRateReturn(pub ::ethers::core::types::U256);
    ///Container type for all return fields from the `LOAN_TO_COLLATERAL` function with signature `LOAN_TO_COLLATERAL()` and selector `0x4db71fc9`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct LoanToCollateralReturn(pub ::ethers::core::types::U256);
    ///Container type for all return fields from the `MAX_REWARD` function with signature `MAX_REWARD()` and selector `0x0e1505e0`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct MaxRewardReturn(pub ::ethers::core::types::U256);
    ///Container type for all return fields from the `MINTR` function with signature `MINTR()` and selector `0x577de7d0`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct MintrReturn(pub ::ethers::core::types::Address);
    ///Container type for all return fields from the `ROLES` function with signature `ROLES()` and selector `0x923cb952`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct RolesReturn(pub ::ethers::core::types::Address);
    ///Container type for all return fields from the `TRSRY` function with signature `TRSRY()` and selector `0x80cee4ab`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct TrsryReturn(pub ::ethers::core::types::Address);
    ///Container type for all return fields from the `active` function with signature `active()` and selector `0x02fb0c5e`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct ActiveReturn(pub bool);
    ///Container type for all return fields from the `configureDependencies` function with signature `configureDependencies()` and selector `0x9459b875`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct ConfigureDependenciesReturn {
        pub dependencies: ::std::vec::Vec<[u8; 5]>,
    }
    ///Container type for all return fields from the `dai` function with signature `dai()` and selector `0xf4b9fa75`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct DaiReturn(pub ::ethers::core::types::Address);
    ///Container type for all return fields from the `factory` function with signature `factory()` and selector `0xc45a0155`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct FactoryReturn(pub ::ethers::core::types::Address);
    ///Container type for all return fields from the `fundTime` function with signature `fundTime()` and selector `0xe7cc298e`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct FundTimeReturn(pub ::ethers::core::types::U256);
    ///Container type for all return fields from the `getCollateralForLoan` function with signature `getCollateralForLoan(uint256)` and selector `0x79904e4c`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct GetCollateralForLoanReturn(pub ::ethers::core::types::U256);
    ///Container type for all return fields from the `getLoanForCollateral` function with signature `getLoanForCollateral(uint256)` and selector `0x30743257`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct GetLoanForCollateralReturn(
        pub ::ethers::core::types::U256,
        pub ::ethers::core::types::U256,
    );
    ///Container type for all return fields from the `getTotalReceivables` function with signature `getTotalReceivables()` and selector `0xa56a7f59`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct GetTotalReceivablesReturn(pub ::ethers::core::types::U256);
    ///Container type for all return fields from the `gohm` function with signature `gohm()` and selector `0x0690b59e`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct GohmReturn(pub ::ethers::core::types::Address);
    ///Container type for all return fields from the `interestForLoan` function with signature `interestForLoan(uint256,uint256)` and selector `0xe37d16f8`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct InterestForLoanReturn(pub ::ethers::core::types::U256);
    ///Container type for all return fields from the `interestReceivables` function with signature `interestReceivables()` and selector `0x017f1f44`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct InterestReceivablesReturn(pub ::ethers::core::types::U256);
    ///Container type for all return fields from the `isActive` function with signature `isActive()` and selector `0x22f3e2d4`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct IsActiveReturn(pub bool);
    ///Container type for all return fields from the `isCoolerCallback` function with signature `isCoolerCallback()` and selector `0x2a471e25`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct IsCoolerCallbackReturn(pub bool);
    ///Container type for all return fields from the `kernel` function with signature `kernel()` and selector `0xd4aae0c4`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct KernelReturn(pub ::ethers::core::types::Address);
    ///Container type for all return fields from the `lendToCooler` function with signature `lendToCooler(address,uint256)` and selector `0x0d88a507`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct LendToCoolerReturn(pub ::ethers::core::types::U256);
    ///Container type for all return fields from the `ohm` function with signature `ohm()` and selector `0x02b1d239`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct OhmReturn(pub ::ethers::core::types::Address);
    ///Container type for all return fields from the `principalReceivables` function with signature `principalReceivables()` and selector `0x09cfa2ee`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct PrincipalReceivablesReturn(pub ::ethers::core::types::U256);
    ///Container type for all return fields from the `rebalance` function with signature `rebalance()` and selector `0x7d7c2a1c`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct RebalanceReturn(pub bool);
    ///Container type for all return fields from the `requestPermissions` function with signature `requestPermissions()` and selector `0x5924be70`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct RequestPermissionsReturn {
        pub requests: ::std::vec::Vec<Permissions>,
    }
    ///Container type for all return fields from the `sdai` function with signature `sdai()` and selector `0x5b2eeca4`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct SdaiReturn(pub ::ethers::core::types::Address);
    ///Container type for all return fields from the `staking` function with signature `staking()` and selector `0x4cf088d9`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct StakingReturn(pub ::ethers::core::types::Address);
    ///`Permissions(bytes5,bytes4)`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct Permissions {
        pub keycode: [u8; 5],
        pub func_selector: [u8; 4],
    }
}
