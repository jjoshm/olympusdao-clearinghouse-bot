#![allow(clippy::all)]
//! This lib contains abigen! generated bindings for solidity contracts.
//! This is autogenerated code.
//! Do not manually edit these files.
//! These files may be overwritten by the codegen system at any time.
pub use cooler::*;
/// This module was auto-generated with ethers-rs Abigen.
/// More information at: <https://github.com/gakonst/ethers-rs>
#[allow(
    clippy::enum_variant_names,
    clippy::too_many_arguments,
    clippy::upper_case_acronyms,
    clippy::type_complexity,
    dead_code,
    non_camel_case_types,
)]
pub mod cooler {
    #[allow(deprecated)]
    fn __abi() -> ::ethers::core::abi::Abi {
        ::ethers::core::abi::ethabi::Contract {
            constructor: ::core::option::Option::None,
            functions: ::core::convert::From::from([
                (
                    ::std::borrow::ToOwned::to_owned("approvals"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::Function {
                            name: ::std::borrow::ToOwned::to_owned("approvals"),
                            inputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::string::String::new(),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Uint(
                                        256usize,
                                    ),
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("uint256"),
                                    ),
                                },
                            ],
                            outputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::string::String::new(),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Address,
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("address"),
                                    ),
                                },
                            ],
                            constant: ::core::option::Option::None,
                            state_mutability: ::ethers::core::abi::ethabi::StateMutability::View,
                        },
                    ],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("approveTransfer"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::Function {
                            name: ::std::borrow::ToOwned::to_owned("approveTransfer"),
                            inputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("to_"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Address,
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("address"),
                                    ),
                                },
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("loanID_"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Uint(
                                        256usize,
                                    ),
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("uint256"),
                                    ),
                                },
                            ],
                            outputs: ::std::vec![],
                            constant: ::core::option::Option::None,
                            state_mutability: ::ethers::core::abi::ethabi::StateMutability::NonPayable,
                        },
                    ],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("claimDefaulted"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::Function {
                            name: ::std::borrow::ToOwned::to_owned("claimDefaulted"),
                            inputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("loanID_"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Uint(
                                        256usize,
                                    ),
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("uint256"),
                                    ),
                                },
                            ],
                            outputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::string::String::new(),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Uint(
                                        256usize,
                                    ),
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("uint256"),
                                    ),
                                },
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::string::String::new(),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Uint(
                                        256usize,
                                    ),
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("uint256"),
                                    ),
                                },
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::string::String::new(),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Uint(
                                        256usize,
                                    ),
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("uint256"),
                                    ),
                                },
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::string::String::new(),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Uint(
                                        256usize,
                                    ),
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("uint256"),
                                    ),
                                },
                            ],
                            constant: ::core::option::Option::None,
                            state_mutability: ::ethers::core::abi::ethabi::StateMutability::NonPayable,
                        },
                    ],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("clearRequest"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::Function {
                            name: ::std::borrow::ToOwned::to_owned("clearRequest"),
                            inputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("reqID_"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Uint(
                                        256usize,
                                    ),
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("uint256"),
                                    ),
                                },
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("recipient_"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Address,
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("address"),
                                    ),
                                },
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("isCallback_"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Bool,
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("bool"),
                                    ),
                                },
                            ],
                            outputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("loanID"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Uint(
                                        256usize,
                                    ),
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("uint256"),
                                    ),
                                },
                            ],
                            constant: ::core::option::Option::None,
                            state_mutability: ::ethers::core::abi::ethabi::StateMutability::NonPayable,
                        },
                    ],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("collateral"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::Function {
                            name: ::std::borrow::ToOwned::to_owned("collateral"),
                            inputs: ::std::vec![],
                            outputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("_collateral"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Address,
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("contract ERC20"),
                                    ),
                                },
                            ],
                            constant: ::core::option::Option::None,
                            state_mutability: ::ethers::core::abi::ethabi::StateMutability::Pure,
                        },
                    ],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("collateralFor"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::Function {
                            name: ::std::borrow::ToOwned::to_owned("collateralFor"),
                            inputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("principal_"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Uint(
                                        256usize,
                                    ),
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("uint256"),
                                    ),
                                },
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("loanToCollateral_"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Uint(
                                        256usize,
                                    ),
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("uint256"),
                                    ),
                                },
                            ],
                            outputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::string::String::new(),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Uint(
                                        256usize,
                                    ),
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("uint256"),
                                    ),
                                },
                            ],
                            constant: ::core::option::Option::None,
                            state_mutability: ::ethers::core::abi::ethabi::StateMutability::View,
                        },
                    ],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("debt"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::Function {
                            name: ::std::borrow::ToOwned::to_owned("debt"),
                            inputs: ::std::vec![],
                            outputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("_debt"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Address,
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("contract ERC20"),
                                    ),
                                },
                            ],
                            constant: ::core::option::Option::None,
                            state_mutability: ::ethers::core::abi::ethabi::StateMutability::Pure,
                        },
                    ],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("delegateVoting"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::Function {
                            name: ::std::borrow::ToOwned::to_owned("delegateVoting"),
                            inputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("to_"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Address,
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("address"),
                                    ),
                                },
                            ],
                            outputs: ::std::vec![],
                            constant: ::core::option::Option::None,
                            state_mutability: ::ethers::core::abi::ethabi::StateMutability::NonPayable,
                        },
                    ],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("extendLoanTerms"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::Function {
                            name: ::std::borrow::ToOwned::to_owned("extendLoanTerms"),
                            inputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("loanID_"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Uint(
                                        256usize,
                                    ),
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("uint256"),
                                    ),
                                },
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("times_"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Uint(8usize),
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("uint8"),
                                    ),
                                },
                            ],
                            outputs: ::std::vec![],
                            constant: ::core::option::Option::None,
                            state_mutability: ::ethers::core::abi::ethabi::StateMutability::NonPayable,
                        },
                    ],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("factory"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::Function {
                            name: ::std::borrow::ToOwned::to_owned("factory"),
                            inputs: ::std::vec![],
                            outputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("_factory"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Address,
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("contract CoolerFactory"),
                                    ),
                                },
                            ],
                            constant: ::core::option::Option::None,
                            state_mutability: ::ethers::core::abi::ethabi::StateMutability::Pure,
                        },
                    ],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("getLoan"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::Function {
                            name: ::std::borrow::ToOwned::to_owned("getLoan"),
                            inputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("loanID_"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Uint(
                                        256usize,
                                    ),
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("uint256"),
                                    ),
                                },
                            ],
                            outputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::string::String::new(),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Tuple(
                                        ::std::vec![
                                            ::ethers::core::abi::ethabi::ParamType::Tuple(
                                                ::std::vec![
                                                    ::ethers::core::abi::ethabi::ParamType::Uint(256usize),
                                                    ::ethers::core::abi::ethabi::ParamType::Uint(256usize),
                                                    ::ethers::core::abi::ethabi::ParamType::Uint(256usize),
                                                    ::ethers::core::abi::ethabi::ParamType::Uint(256usize),
                                                    ::ethers::core::abi::ethabi::ParamType::Bool,
                                                    ::ethers::core::abi::ethabi::ParamType::Address,
                                                ],
                                            ),
                                            ::ethers::core::abi::ethabi::ParamType::Uint(256usize),
                                            ::ethers::core::abi::ethabi::ParamType::Uint(256usize),
                                            ::ethers::core::abi::ethabi::ParamType::Uint(256usize),
                                            ::ethers::core::abi::ethabi::ParamType::Uint(256usize),
                                            ::ethers::core::abi::ethabi::ParamType::Address,
                                            ::ethers::core::abi::ethabi::ParamType::Address,
                                            ::ethers::core::abi::ethabi::ParamType::Bool,
                                        ],
                                    ),
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("struct Cooler.Loan"),
                                    ),
                                },
                            ],
                            constant: ::core::option::Option::None,
                            state_mutability: ::ethers::core::abi::ethabi::StateMutability::View,
                        },
                    ],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("getRequest"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::Function {
                            name: ::std::borrow::ToOwned::to_owned("getRequest"),
                            inputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("reqID_"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Uint(
                                        256usize,
                                    ),
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("uint256"),
                                    ),
                                },
                            ],
                            outputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::string::String::new(),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Tuple(
                                        ::std::vec![
                                            ::ethers::core::abi::ethabi::ParamType::Uint(256usize),
                                            ::ethers::core::abi::ethabi::ParamType::Uint(256usize),
                                            ::ethers::core::abi::ethabi::ParamType::Uint(256usize),
                                            ::ethers::core::abi::ethabi::ParamType::Uint(256usize),
                                            ::ethers::core::abi::ethabi::ParamType::Bool,
                                            ::ethers::core::abi::ethabi::ParamType::Address,
                                        ],
                                    ),
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("struct Cooler.Request"),
                                    ),
                                },
                            ],
                            constant: ::core::option::Option::None,
                            state_mutability: ::ethers::core::abi::ethabi::StateMutability::View,
                        },
                    ],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("hasExpired"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::Function {
                            name: ::std::borrow::ToOwned::to_owned("hasExpired"),
                            inputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("loanID_"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Uint(
                                        256usize,
                                    ),
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("uint256"),
                                    ),
                                },
                            ],
                            outputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::string::String::new(),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Bool,
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("bool"),
                                    ),
                                },
                            ],
                            constant: ::core::option::Option::None,
                            state_mutability: ::ethers::core::abi::ethabi::StateMutability::View,
                        },
                    ],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("interestFor"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::Function {
                            name: ::std::borrow::ToOwned::to_owned("interestFor"),
                            inputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("principal_"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Uint(
                                        256usize,
                                    ),
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("uint256"),
                                    ),
                                },
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("rate_"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Uint(
                                        256usize,
                                    ),
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("uint256"),
                                    ),
                                },
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("duration_"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Uint(
                                        256usize,
                                    ),
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("uint256"),
                                    ),
                                },
                            ],
                            outputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::string::String::new(),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Uint(
                                        256usize,
                                    ),
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("uint256"),
                                    ),
                                },
                            ],
                            constant: ::core::option::Option::None,
                            state_mutability: ::ethers::core::abi::ethabi::StateMutability::Pure,
                        },
                    ],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("isActive"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::Function {
                            name: ::std::borrow::ToOwned::to_owned("isActive"),
                            inputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("reqID_"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Uint(
                                        256usize,
                                    ),
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("uint256"),
                                    ),
                                },
                            ],
                            outputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::string::String::new(),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Bool,
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("bool"),
                                    ),
                                },
                            ],
                            constant: ::core::option::Option::None,
                            state_mutability: ::ethers::core::abi::ethabi::StateMutability::View,
                        },
                    ],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("loans"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::Function {
                            name: ::std::borrow::ToOwned::to_owned("loans"),
                            inputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::string::String::new(),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Uint(
                                        256usize,
                                    ),
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("uint256"),
                                    ),
                                },
                            ],
                            outputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("request"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Tuple(
                                        ::std::vec![
                                            ::ethers::core::abi::ethabi::ParamType::Uint(256usize),
                                            ::ethers::core::abi::ethabi::ParamType::Uint(256usize),
                                            ::ethers::core::abi::ethabi::ParamType::Uint(256usize),
                                            ::ethers::core::abi::ethabi::ParamType::Uint(256usize),
                                            ::ethers::core::abi::ethabi::ParamType::Bool,
                                            ::ethers::core::abi::ethabi::ParamType::Address,
                                        ],
                                    ),
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("struct Cooler.Request"),
                                    ),
                                },
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("principal"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Uint(
                                        256usize,
                                    ),
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("uint256"),
                                    ),
                                },
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("interestDue"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Uint(
                                        256usize,
                                    ),
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("uint256"),
                                    ),
                                },
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("collateral"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Uint(
                                        256usize,
                                    ),
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("uint256"),
                                    ),
                                },
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("expiry"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Uint(
                                        256usize,
                                    ),
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("uint256"),
                                    ),
                                },
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("lender"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Address,
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("address"),
                                    ),
                                },
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("recipient"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Address,
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("address"),
                                    ),
                                },
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("callback"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Bool,
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("bool"),
                                    ),
                                },
                            ],
                            constant: ::core::option::Option::None,
                            state_mutability: ::ethers::core::abi::ethabi::StateMutability::View,
                        },
                    ],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("owner"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::Function {
                            name: ::std::borrow::ToOwned::to_owned("owner"),
                            inputs: ::std::vec![],
                            outputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("_owner"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Address,
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("address"),
                                    ),
                                },
                            ],
                            constant: ::core::option::Option::None,
                            state_mutability: ::ethers::core::abi::ethabi::StateMutability::Pure,
                        },
                    ],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("repayLoan"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::Function {
                            name: ::std::borrow::ToOwned::to_owned("repayLoan"),
                            inputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("loanID_"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Uint(
                                        256usize,
                                    ),
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("uint256"),
                                    ),
                                },
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("repayment_"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Uint(
                                        256usize,
                                    ),
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("uint256"),
                                    ),
                                },
                            ],
                            outputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::string::String::new(),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Uint(
                                        256usize,
                                    ),
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("uint256"),
                                    ),
                                },
                            ],
                            constant: ::core::option::Option::None,
                            state_mutability: ::ethers::core::abi::ethabi::StateMutability::NonPayable,
                        },
                    ],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("requestLoan"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::Function {
                            name: ::std::borrow::ToOwned::to_owned("requestLoan"),
                            inputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("amount_"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Uint(
                                        256usize,
                                    ),
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("uint256"),
                                    ),
                                },
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("interest_"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Uint(
                                        256usize,
                                    ),
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("uint256"),
                                    ),
                                },
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("loanToCollateral_"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Uint(
                                        256usize,
                                    ),
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("uint256"),
                                    ),
                                },
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("duration_"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Uint(
                                        256usize,
                                    ),
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("uint256"),
                                    ),
                                },
                            ],
                            outputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("reqID"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Uint(
                                        256usize,
                                    ),
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("uint256"),
                                    ),
                                },
                            ],
                            constant: ::core::option::Option::None,
                            state_mutability: ::ethers::core::abi::ethabi::StateMutability::NonPayable,
                        },
                    ],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("requests"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::Function {
                            name: ::std::borrow::ToOwned::to_owned("requests"),
                            inputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::string::String::new(),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Uint(
                                        256usize,
                                    ),
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("uint256"),
                                    ),
                                },
                            ],
                            outputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("amount"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Uint(
                                        256usize,
                                    ),
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("uint256"),
                                    ),
                                },
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("interest"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Uint(
                                        256usize,
                                    ),
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("uint256"),
                                    ),
                                },
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("loanToCollateral"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Uint(
                                        256usize,
                                    ),
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("uint256"),
                                    ),
                                },
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("duration"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Uint(
                                        256usize,
                                    ),
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("uint256"),
                                    ),
                                },
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("active"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Bool,
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("bool"),
                                    ),
                                },
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("requester"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Address,
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("address"),
                                    ),
                                },
                            ],
                            constant: ::core::option::Option::None,
                            state_mutability: ::ethers::core::abi::ethabi::StateMutability::View,
                        },
                    ],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("rescindRequest"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::Function {
                            name: ::std::borrow::ToOwned::to_owned("rescindRequest"),
                            inputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("reqID_"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Uint(
                                        256usize,
                                    ),
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("uint256"),
                                    ),
                                },
                            ],
                            outputs: ::std::vec![],
                            constant: ::core::option::Option::None,
                            state_mutability: ::ethers::core::abi::ethabi::StateMutability::NonPayable,
                        },
                    ],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("setRepaymentAddress"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::Function {
                            name: ::std::borrow::ToOwned::to_owned(
                                "setRepaymentAddress",
                            ),
                            inputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("loanID_"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Uint(
                                        256usize,
                                    ),
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("uint256"),
                                    ),
                                },
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("recipient_"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Address,
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("address"),
                                    ),
                                },
                            ],
                            outputs: ::std::vec![],
                            constant: ::core::option::Option::None,
                            state_mutability: ::ethers::core::abi::ethabi::StateMutability::NonPayable,
                        },
                    ],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("transferOwnership"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::Function {
                            name: ::std::borrow::ToOwned::to_owned("transferOwnership"),
                            inputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("loanID_"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Uint(
                                        256usize,
                                    ),
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("uint256"),
                                    ),
                                },
                            ],
                            outputs: ::std::vec![],
                            constant: ::core::option::Option::None,
                            state_mutability: ::ethers::core::abi::ethabi::StateMutability::NonPayable,
                        },
                    ],
                ),
            ]),
            events: ::std::collections::BTreeMap::new(),
            errors: ::core::convert::From::from([
                (
                    ::std::borrow::ToOwned::to_owned("Deactivated"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::AbiError {
                            name: ::std::borrow::ToOwned::to_owned("Deactivated"),
                            inputs: ::std::vec![],
                        },
                    ],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("Default"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::AbiError {
                            name: ::std::borrow::ToOwned::to_owned("Default"),
                            inputs: ::std::vec![],
                        },
                    ],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("NotCoolerCallback"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::AbiError {
                            name: ::std::borrow::ToOwned::to_owned("NotCoolerCallback"),
                            inputs: ::std::vec![],
                        },
                    ],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("NotExpired"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::AbiError {
                            name: ::std::borrow::ToOwned::to_owned("NotExpired"),
                            inputs: ::std::vec![],
                        },
                    ],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("OnlyApproved"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::AbiError {
                            name: ::std::borrow::ToOwned::to_owned("OnlyApproved"),
                            inputs: ::std::vec![],
                        },
                    ],
                ),
            ]),
            receive: false,
            fallback: false,
        }
    }
    ///The parsed JSON ABI of the contract.
    pub static COOLER_ABI: ::ethers::contract::Lazy<::ethers::core::abi::Abi> = ::ethers::contract::Lazy::new(
        __abi,
    );
    pub struct Cooler<M>(::ethers::contract::Contract<M>);
    impl<M> ::core::clone::Clone for Cooler<M> {
        fn clone(&self) -> Self {
            Self(::core::clone::Clone::clone(&self.0))
        }
    }
    impl<M> ::core::ops::Deref for Cooler<M> {
        type Target = ::ethers::contract::Contract<M>;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl<M> ::core::ops::DerefMut for Cooler<M> {
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl<M> ::core::fmt::Debug for Cooler<M> {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple(::core::stringify!(Cooler)).field(&self.address()).finish()
        }
    }
    impl<M: ::ethers::providers::Middleware> Cooler<M> {
        /// Creates a new contract instance with the specified `ethers` client at
        /// `address`. The contract derefs to a `ethers::Contract` object.
        pub fn new<T: Into<::ethers::core::types::Address>>(
            address: T,
            client: ::std::sync::Arc<M>,
        ) -> Self {
            Self(
                ::ethers::contract::Contract::new(
                    address.into(),
                    COOLER_ABI.clone(),
                    client,
                ),
            )
        }
        ///Calls the contract's `approvals` (0x63035f66) function
        pub fn approvals(
            &self,
            p0: ::ethers::core::types::U256,
        ) -> ::ethers::contract::builders::ContractCall<
            M,
            ::ethers::core::types::Address,
        > {
            self.0
                .method_hash([99, 3, 95, 102], p0)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `approveTransfer` (0xfa02c4b7) function
        pub fn approve_transfer(
            &self,
            to: ::ethers::core::types::Address,
            loan_id: ::ethers::core::types::U256,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([250, 2, 196, 183], (to, loan_id))
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `claimDefaulted` (0x57e8a2f0) function
        pub fn claim_defaulted(
            &self,
            loan_id: ::ethers::core::types::U256,
        ) -> ::ethers::contract::builders::ContractCall<
            M,
            (
                ::ethers::core::types::U256,
                ::ethers::core::types::U256,
                ::ethers::core::types::U256,
                ::ethers::core::types::U256,
            ),
        > {
            self.0
                .method_hash([87, 232, 162, 240], loan_id)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `clearRequest` (0x10cf5a19) function
        pub fn clear_request(
            &self,
            req_id: ::ethers::core::types::U256,
            recipient: ::ethers::core::types::Address,
            is_callback: bool,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([16, 207, 90, 25], (req_id, recipient, is_callback))
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `collateral` (0xd8dfeb45) function
        pub fn collateral(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<
            M,
            ::ethers::core::types::Address,
        > {
            self.0
                .method_hash([216, 223, 235, 69], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `collateralFor` (0x99c6b2ef) function
        pub fn collateral_for(
            &self,
            principal: ::ethers::core::types::U256,
            loan_to_collateral: ::ethers::core::types::U256,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([153, 198, 178, 239], (principal, loan_to_collateral))
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `debt` (0x0dca59c1) function
        pub fn debt(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<
            M,
            ::ethers::core::types::Address,
        > {
            self.0
                .method_hash([13, 202, 89, 193], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `delegateVoting` (0x765cb83a) function
        pub fn delegate_voting(
            &self,
            to: ::ethers::core::types::Address,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([118, 92, 184, 58], to)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `extendLoanTerms` (0x9fdc540c) function
        pub fn extend_loan_terms(
            &self,
            loan_id: ::ethers::core::types::U256,
            times: u8,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([159, 220, 84, 12], (loan_id, times))
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `factory` (0xc45a0155) function
        pub fn factory(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<
            M,
            ::ethers::core::types::Address,
        > {
            self.0
                .method_hash([196, 90, 1, 85], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `getLoan` (0x504006ca) function
        pub fn get_loan(
            &self,
            loan_id: ::ethers::core::types::U256,
        ) -> ::ethers::contract::builders::ContractCall<M, Loan> {
            self.0
                .method_hash([80, 64, 6, 202], loan_id)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `getRequest` (0xc58343ef) function
        pub fn get_request(
            &self,
            req_id: ::ethers::core::types::U256,
        ) -> ::ethers::contract::builders::ContractCall<M, Request> {
            self.0
                .method_hash([197, 131, 67, 239], req_id)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `hasExpired` (0x49fcbc54) function
        pub fn has_expired(
            &self,
            loan_id: ::ethers::core::types::U256,
        ) -> ::ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([73, 252, 188, 84], loan_id)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `interestFor` (0x9bcf40a2) function
        pub fn interest_for(
            &self,
            principal: ::ethers::core::types::U256,
            rate: ::ethers::core::types::U256,
            duration: ::ethers::core::types::U256,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([155, 207, 64, 162], (principal, rate, duration))
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `isActive` (0x82afd23b) function
        pub fn is_active(
            &self,
            req_id: ::ethers::core::types::U256,
        ) -> ::ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([130, 175, 210, 59], req_id)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `loans` (0xe1ec3c68) function
        pub fn loans(
            &self,
            p0: ::ethers::core::types::U256,
        ) -> ::ethers::contract::builders::ContractCall<
            M,
            (
                Request,
                ::ethers::core::types::U256,
                ::ethers::core::types::U256,
                ::ethers::core::types::U256,
                ::ethers::core::types::U256,
                ::ethers::core::types::Address,
                ::ethers::core::types::Address,
                bool,
            ),
        > {
            self.0
                .method_hash([225, 236, 60, 104], p0)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `owner` (0x8da5cb5b) function
        pub fn owner(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<
            M,
            ::ethers::core::types::Address,
        > {
            self.0
                .method_hash([141, 165, 203, 91], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `repayLoan` (0x8a700b53) function
        pub fn repay_loan(
            &self,
            loan_id: ::ethers::core::types::U256,
            repayment: ::ethers::core::types::U256,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([138, 112, 11, 83], (loan_id, repayment))
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `requestLoan` (0x753c7ff9) function
        pub fn request_loan(
            &self,
            amount: ::ethers::core::types::U256,
            interest: ::ethers::core::types::U256,
            loan_to_collateral: ::ethers::core::types::U256,
            duration: ::ethers::core::types::U256,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash(
                    [117, 60, 127, 249],
                    (amount, interest, loan_to_collateral, duration),
                )
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `requests` (0x81d12c58) function
        pub fn requests(
            &self,
            p0: ::ethers::core::types::U256,
        ) -> ::ethers::contract::builders::ContractCall<
            M,
            (
                ::ethers::core::types::U256,
                ::ethers::core::types::U256,
                ::ethers::core::types::U256,
                ::ethers::core::types::U256,
                bool,
                ::ethers::core::types::Address,
            ),
        > {
            self.0
                .method_hash([129, 209, 44, 88], p0)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `rescindRequest` (0x206967cf) function
        pub fn rescind_request(
            &self,
            req_id: ::ethers::core::types::U256,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([32, 105, 103, 207], req_id)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `setRepaymentAddress` (0xc2c60b72) function
        pub fn set_repayment_address(
            &self,
            loan_id: ::ethers::core::types::U256,
            recipient: ::ethers::core::types::Address,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([194, 198, 11, 114], (loan_id, recipient))
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `transferOwnership` (0xd23e8489) function
        pub fn transfer_ownership(
            &self,
            loan_id: ::ethers::core::types::U256,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([210, 62, 132, 137], loan_id)
                .expect("method not found (this should never happen)")
        }
    }
    impl<M: ::ethers::providers::Middleware> From<::ethers::contract::Contract<M>>
    for Cooler<M> {
        fn from(contract: ::ethers::contract::Contract<M>) -> Self {
            Self::new(contract.address(), contract.client())
        }
    }
    ///Custom Error type `Deactivated` with signature `Deactivated()` and selector `0x1142a68c`
    #[derive(
        Clone,
        ::ethers::contract::EthError,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[etherror(name = "Deactivated", abi = "Deactivated()")]
    pub struct Deactivated;
    ///Custom Error type `Default` with signature `Default()` and selector `0xc9c61e20`
    #[derive(
        Clone,
        ::ethers::contract::EthError,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[etherror(name = "Default", abi = "Default()")]
    pub struct Default;
    ///Custom Error type `NotCoolerCallback` with signature `NotCoolerCallback()` and selector `0xb83f6b40`
    #[derive(
        Clone,
        ::ethers::contract::EthError,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[etherror(name = "NotCoolerCallback", abi = "NotCoolerCallback()")]
    pub struct NotCoolerCallback;
    ///Custom Error type `NotExpired` with signature `NotExpired()` and selector `0xd0404f85`
    #[derive(
        Clone,
        ::ethers::contract::EthError,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[etherror(name = "NotExpired", abi = "NotExpired()")]
    pub struct NotExpired;
    ///Custom Error type `OnlyApproved` with signature `OnlyApproved()` and selector `0x64759a33`
    #[derive(
        Clone,
        ::ethers::contract::EthError,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[etherror(name = "OnlyApproved", abi = "OnlyApproved()")]
    pub struct OnlyApproved;
    ///Container type for all of the contract's custom errors
    #[derive(Clone, ::ethers::contract::EthAbiType, Debug, PartialEq, Eq, Hash)]
    pub enum CoolerErrors {
        Deactivated(Deactivated),
        Default(Default),
        NotCoolerCallback(NotCoolerCallback),
        NotExpired(NotExpired),
        OnlyApproved(OnlyApproved),
        /// The standard solidity revert string, with selector
        /// Error(string) -- 0x08c379a0
        RevertString(::std::string::String),
    }
    impl ::ethers::core::abi::AbiDecode for CoolerErrors {
        fn decode(
            data: impl AsRef<[u8]>,
        ) -> ::core::result::Result<Self, ::ethers::core::abi::AbiError> {
            let data = data.as_ref();
            if let Ok(decoded) = <::std::string::String as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::RevertString(decoded));
            }
            if let Ok(decoded) = <Deactivated as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::Deactivated(decoded));
            }
            if let Ok(decoded) = <Default as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::Default(decoded));
            }
            if let Ok(decoded) = <NotCoolerCallback as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::NotCoolerCallback(decoded));
            }
            if let Ok(decoded) = <NotExpired as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::NotExpired(decoded));
            }
            if let Ok(decoded) = <OnlyApproved as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::OnlyApproved(decoded));
            }
            Err(::ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ::ethers::core::abi::AbiEncode for CoolerErrors {
        fn encode(self) -> ::std::vec::Vec<u8> {
            match self {
                Self::Deactivated(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::Default(element) => ::ethers::core::abi::AbiEncode::encode(element),
                Self::NotCoolerCallback(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::NotExpired(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::OnlyApproved(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::RevertString(s) => ::ethers::core::abi::AbiEncode::encode(s),
            }
        }
    }
    impl ::ethers::contract::ContractRevert for CoolerErrors {
        fn valid_selector(selector: [u8; 4]) -> bool {
            match selector {
                [0x08, 0xc3, 0x79, 0xa0] => true,
                _ if selector
                    == <Deactivated as ::ethers::contract::EthError>::selector() => true,
                _ if selector
                    == <Default as ::ethers::contract::EthError>::selector() => true,
                _ if selector
                    == <NotCoolerCallback as ::ethers::contract::EthError>::selector() => {
                    true
                }
                _ if selector
                    == <NotExpired as ::ethers::contract::EthError>::selector() => true,
                _ if selector
                    == <OnlyApproved as ::ethers::contract::EthError>::selector() => true,
                _ => false,
            }
        }
    }
    impl ::core::fmt::Display for CoolerErrors {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
                Self::Deactivated(element) => ::core::fmt::Display::fmt(element, f),
                Self::Default(element) => ::core::fmt::Display::fmt(element, f),
                Self::NotCoolerCallback(element) => ::core::fmt::Display::fmt(element, f),
                Self::NotExpired(element) => ::core::fmt::Display::fmt(element, f),
                Self::OnlyApproved(element) => ::core::fmt::Display::fmt(element, f),
                Self::RevertString(s) => ::core::fmt::Display::fmt(s, f),
            }
        }
    }
    impl ::core::convert::From<::std::string::String> for CoolerErrors {
        fn from(value: String) -> Self {
            Self::RevertString(value)
        }
    }
    impl ::core::convert::From<Deactivated> for CoolerErrors {
        fn from(value: Deactivated) -> Self {
            Self::Deactivated(value)
        }
    }
    impl ::core::convert::From<Default> for CoolerErrors {
        fn from(value: Default) -> Self {
            Self::Default(value)
        }
    }
    impl ::core::convert::From<NotCoolerCallback> for CoolerErrors {
        fn from(value: NotCoolerCallback) -> Self {
            Self::NotCoolerCallback(value)
        }
    }
    impl ::core::convert::From<NotExpired> for CoolerErrors {
        fn from(value: NotExpired) -> Self {
            Self::NotExpired(value)
        }
    }
    impl ::core::convert::From<OnlyApproved> for CoolerErrors {
        fn from(value: OnlyApproved) -> Self {
            Self::OnlyApproved(value)
        }
    }
    ///Container type for all input parameters for the `approvals` function with signature `approvals(uint256)` and selector `0x63035f66`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "approvals", abi = "approvals(uint256)")]
    pub struct ApprovalsCall(pub ::ethers::core::types::U256);
    ///Container type for all input parameters for the `approveTransfer` function with signature `approveTransfer(address,uint256)` and selector `0xfa02c4b7`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "approveTransfer", abi = "approveTransfer(address,uint256)")]
    pub struct ApproveTransferCall {
        pub to: ::ethers::core::types::Address,
        pub loan_id: ::ethers::core::types::U256,
    }
    ///Container type for all input parameters for the `claimDefaulted` function with signature `claimDefaulted(uint256)` and selector `0x57e8a2f0`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "claimDefaulted", abi = "claimDefaulted(uint256)")]
    pub struct ClaimDefaultedCall {
        pub loan_id: ::ethers::core::types::U256,
    }
    ///Container type for all input parameters for the `clearRequest` function with signature `clearRequest(uint256,address,bool)` and selector `0x10cf5a19`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "clearRequest", abi = "clearRequest(uint256,address,bool)")]
    pub struct ClearRequestCall {
        pub req_id: ::ethers::core::types::U256,
        pub recipient: ::ethers::core::types::Address,
        pub is_callback: bool,
    }
    ///Container type for all input parameters for the `collateral` function with signature `collateral()` and selector `0xd8dfeb45`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "collateral", abi = "collateral()")]
    pub struct CollateralCall;
    ///Container type for all input parameters for the `collateralFor` function with signature `collateralFor(uint256,uint256)` and selector `0x99c6b2ef`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "collateralFor", abi = "collateralFor(uint256,uint256)")]
    pub struct CollateralForCall {
        pub principal: ::ethers::core::types::U256,
        pub loan_to_collateral: ::ethers::core::types::U256,
    }
    ///Container type for all input parameters for the `debt` function with signature `debt()` and selector `0x0dca59c1`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "debt", abi = "debt()")]
    pub struct DebtCall;
    ///Container type for all input parameters for the `delegateVoting` function with signature `delegateVoting(address)` and selector `0x765cb83a`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "delegateVoting", abi = "delegateVoting(address)")]
    pub struct DelegateVotingCall {
        pub to: ::ethers::core::types::Address,
    }
    ///Container type for all input parameters for the `extendLoanTerms` function with signature `extendLoanTerms(uint256,uint8)` and selector `0x9fdc540c`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "extendLoanTerms", abi = "extendLoanTerms(uint256,uint8)")]
    pub struct ExtendLoanTermsCall {
        pub loan_id: ::ethers::core::types::U256,
        pub times: u8,
    }
    ///Container type for all input parameters for the `factory` function with signature `factory()` and selector `0xc45a0155`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "factory", abi = "factory()")]
    pub struct FactoryCall;
    ///Container type for all input parameters for the `getLoan` function with signature `getLoan(uint256)` and selector `0x504006ca`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "getLoan", abi = "getLoan(uint256)")]
    pub struct GetLoanCall {
        pub loan_id: ::ethers::core::types::U256,
    }
    ///Container type for all input parameters for the `getRequest` function with signature `getRequest(uint256)` and selector `0xc58343ef`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "getRequest", abi = "getRequest(uint256)")]
    pub struct GetRequestCall {
        pub req_id: ::ethers::core::types::U256,
    }
    ///Container type for all input parameters for the `hasExpired` function with signature `hasExpired(uint256)` and selector `0x49fcbc54`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "hasExpired", abi = "hasExpired(uint256)")]
    pub struct HasExpiredCall {
        pub loan_id: ::ethers::core::types::U256,
    }
    ///Container type for all input parameters for the `interestFor` function with signature `interestFor(uint256,uint256,uint256)` and selector `0x9bcf40a2`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "interestFor", abi = "interestFor(uint256,uint256,uint256)")]
    pub struct InterestForCall {
        pub principal: ::ethers::core::types::U256,
        pub rate: ::ethers::core::types::U256,
        pub duration: ::ethers::core::types::U256,
    }
    ///Container type for all input parameters for the `isActive` function with signature `isActive(uint256)` and selector `0x82afd23b`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "isActive", abi = "isActive(uint256)")]
    pub struct IsActiveCall {
        pub req_id: ::ethers::core::types::U256,
    }
    ///Container type for all input parameters for the `loans` function with signature `loans(uint256)` and selector `0xe1ec3c68`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "loans", abi = "loans(uint256)")]
    pub struct LoansCall(pub ::ethers::core::types::U256);
    ///Container type for all input parameters for the `owner` function with signature `owner()` and selector `0x8da5cb5b`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "owner", abi = "owner()")]
    pub struct OwnerCall;
    ///Container type for all input parameters for the `repayLoan` function with signature `repayLoan(uint256,uint256)` and selector `0x8a700b53`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "repayLoan", abi = "repayLoan(uint256,uint256)")]
    pub struct RepayLoanCall {
        pub loan_id: ::ethers::core::types::U256,
        pub repayment: ::ethers::core::types::U256,
    }
    ///Container type for all input parameters for the `requestLoan` function with signature `requestLoan(uint256,uint256,uint256,uint256)` and selector `0x753c7ff9`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(
        name = "requestLoan",
        abi = "requestLoan(uint256,uint256,uint256,uint256)"
    )]
    pub struct RequestLoanCall {
        pub amount: ::ethers::core::types::U256,
        pub interest: ::ethers::core::types::U256,
        pub loan_to_collateral: ::ethers::core::types::U256,
        pub duration: ::ethers::core::types::U256,
    }
    ///Container type for all input parameters for the `requests` function with signature `requests(uint256)` and selector `0x81d12c58`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "requests", abi = "requests(uint256)")]
    pub struct RequestsCall(pub ::ethers::core::types::U256);
    ///Container type for all input parameters for the `rescindRequest` function with signature `rescindRequest(uint256)` and selector `0x206967cf`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "rescindRequest", abi = "rescindRequest(uint256)")]
    pub struct RescindRequestCall {
        pub req_id: ::ethers::core::types::U256,
    }
    ///Container type for all input parameters for the `setRepaymentAddress` function with signature `setRepaymentAddress(uint256,address)` and selector `0xc2c60b72`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(
        name = "setRepaymentAddress",
        abi = "setRepaymentAddress(uint256,address)"
    )]
    pub struct SetRepaymentAddressCall {
        pub loan_id: ::ethers::core::types::U256,
        pub recipient: ::ethers::core::types::Address,
    }
    ///Container type for all input parameters for the `transferOwnership` function with signature `transferOwnership(uint256)` and selector `0xd23e8489`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "transferOwnership", abi = "transferOwnership(uint256)")]
    pub struct TransferOwnershipCall {
        pub loan_id: ::ethers::core::types::U256,
    }
    ///Container type for all of the contract's call
    #[derive(Clone, ::ethers::contract::EthAbiType, Debug, PartialEq, Eq, Hash)]
    pub enum CoolerCalls {
        Approvals(ApprovalsCall),
        ApproveTransfer(ApproveTransferCall),
        ClaimDefaulted(ClaimDefaultedCall),
        ClearRequest(ClearRequestCall),
        Collateral(CollateralCall),
        CollateralFor(CollateralForCall),
        Debt(DebtCall),
        DelegateVoting(DelegateVotingCall),
        ExtendLoanTerms(ExtendLoanTermsCall),
        Factory(FactoryCall),
        GetLoan(GetLoanCall),
        GetRequest(GetRequestCall),
        HasExpired(HasExpiredCall),
        InterestFor(InterestForCall),
        IsActive(IsActiveCall),
        Loans(LoansCall),
        Owner(OwnerCall),
        RepayLoan(RepayLoanCall),
        RequestLoan(RequestLoanCall),
        Requests(RequestsCall),
        RescindRequest(RescindRequestCall),
        SetRepaymentAddress(SetRepaymentAddressCall),
        TransferOwnership(TransferOwnershipCall),
    }
    impl ::ethers::core::abi::AbiDecode for CoolerCalls {
        fn decode(
            data: impl AsRef<[u8]>,
        ) -> ::core::result::Result<Self, ::ethers::core::abi::AbiError> {
            let data = data.as_ref();
            if let Ok(decoded) = <ApprovalsCall as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::Approvals(decoded));
            }
            if let Ok(decoded) = <ApproveTransferCall as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::ApproveTransfer(decoded));
            }
            if let Ok(decoded) = <ClaimDefaultedCall as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::ClaimDefaulted(decoded));
            }
            if let Ok(decoded) = <ClearRequestCall as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::ClearRequest(decoded));
            }
            if let Ok(decoded) = <CollateralCall as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::Collateral(decoded));
            }
            if let Ok(decoded) = <CollateralForCall as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::CollateralFor(decoded));
            }
            if let Ok(decoded) = <DebtCall as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::Debt(decoded));
            }
            if let Ok(decoded) = <DelegateVotingCall as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::DelegateVoting(decoded));
            }
            if let Ok(decoded) = <ExtendLoanTermsCall as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::ExtendLoanTerms(decoded));
            }
            if let Ok(decoded) = <FactoryCall as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::Factory(decoded));
            }
            if let Ok(decoded) = <GetLoanCall as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::GetLoan(decoded));
            }
            if let Ok(decoded) = <GetRequestCall as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::GetRequest(decoded));
            }
            if let Ok(decoded) = <HasExpiredCall as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::HasExpired(decoded));
            }
            if let Ok(decoded) = <InterestForCall as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::InterestFor(decoded));
            }
            if let Ok(decoded) = <IsActiveCall as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::IsActive(decoded));
            }
            if let Ok(decoded) = <LoansCall as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::Loans(decoded));
            }
            if let Ok(decoded) = <OwnerCall as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::Owner(decoded));
            }
            if let Ok(decoded) = <RepayLoanCall as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::RepayLoan(decoded));
            }
            if let Ok(decoded) = <RequestLoanCall as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::RequestLoan(decoded));
            }
            if let Ok(decoded) = <RequestsCall as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::Requests(decoded));
            }
            if let Ok(decoded) = <RescindRequestCall as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::RescindRequest(decoded));
            }
            if let Ok(decoded) = <SetRepaymentAddressCall as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::SetRepaymentAddress(decoded));
            }
            if let Ok(decoded) = <TransferOwnershipCall as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::TransferOwnership(decoded));
            }
            Err(::ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ::ethers::core::abi::AbiEncode for CoolerCalls {
        fn encode(self) -> Vec<u8> {
            match self {
                Self::Approvals(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::ApproveTransfer(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::ClaimDefaulted(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::ClearRequest(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::Collateral(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::CollateralFor(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::Debt(element) => ::ethers::core::abi::AbiEncode::encode(element),
                Self::DelegateVoting(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::ExtendLoanTerms(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::Factory(element) => ::ethers::core::abi::AbiEncode::encode(element),
                Self::GetLoan(element) => ::ethers::core::abi::AbiEncode::encode(element),
                Self::GetRequest(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::HasExpired(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::InterestFor(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::IsActive(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::Loans(element) => ::ethers::core::abi::AbiEncode::encode(element),
                Self::Owner(element) => ::ethers::core::abi::AbiEncode::encode(element),
                Self::RepayLoan(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::RequestLoan(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::Requests(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::RescindRequest(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::SetRepaymentAddress(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::TransferOwnership(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
            }
        }
    }
    impl ::core::fmt::Display for CoolerCalls {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
                Self::Approvals(element) => ::core::fmt::Display::fmt(element, f),
                Self::ApproveTransfer(element) => ::core::fmt::Display::fmt(element, f),
                Self::ClaimDefaulted(element) => ::core::fmt::Display::fmt(element, f),
                Self::ClearRequest(element) => ::core::fmt::Display::fmt(element, f),
                Self::Collateral(element) => ::core::fmt::Display::fmt(element, f),
                Self::CollateralFor(element) => ::core::fmt::Display::fmt(element, f),
                Self::Debt(element) => ::core::fmt::Display::fmt(element, f),
                Self::DelegateVoting(element) => ::core::fmt::Display::fmt(element, f),
                Self::ExtendLoanTerms(element) => ::core::fmt::Display::fmt(element, f),
                Self::Factory(element) => ::core::fmt::Display::fmt(element, f),
                Self::GetLoan(element) => ::core::fmt::Display::fmt(element, f),
                Self::GetRequest(element) => ::core::fmt::Display::fmt(element, f),
                Self::HasExpired(element) => ::core::fmt::Display::fmt(element, f),
                Self::InterestFor(element) => ::core::fmt::Display::fmt(element, f),
                Self::IsActive(element) => ::core::fmt::Display::fmt(element, f),
                Self::Loans(element) => ::core::fmt::Display::fmt(element, f),
                Self::Owner(element) => ::core::fmt::Display::fmt(element, f),
                Self::RepayLoan(element) => ::core::fmt::Display::fmt(element, f),
                Self::RequestLoan(element) => ::core::fmt::Display::fmt(element, f),
                Self::Requests(element) => ::core::fmt::Display::fmt(element, f),
                Self::RescindRequest(element) => ::core::fmt::Display::fmt(element, f),
                Self::SetRepaymentAddress(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
                Self::TransferOwnership(element) => ::core::fmt::Display::fmt(element, f),
            }
        }
    }
    impl ::core::convert::From<ApprovalsCall> for CoolerCalls {
        fn from(value: ApprovalsCall) -> Self {
            Self::Approvals(value)
        }
    }
    impl ::core::convert::From<ApproveTransferCall> for CoolerCalls {
        fn from(value: ApproveTransferCall) -> Self {
            Self::ApproveTransfer(value)
        }
    }
    impl ::core::convert::From<ClaimDefaultedCall> for CoolerCalls {
        fn from(value: ClaimDefaultedCall) -> Self {
            Self::ClaimDefaulted(value)
        }
    }
    impl ::core::convert::From<ClearRequestCall> for CoolerCalls {
        fn from(value: ClearRequestCall) -> Self {
            Self::ClearRequest(value)
        }
    }
    impl ::core::convert::From<CollateralCall> for CoolerCalls {
        fn from(value: CollateralCall) -> Self {
            Self::Collateral(value)
        }
    }
    impl ::core::convert::From<CollateralForCall> for CoolerCalls {
        fn from(value: CollateralForCall) -> Self {
            Self::CollateralFor(value)
        }
    }
    impl ::core::convert::From<DebtCall> for CoolerCalls {
        fn from(value: DebtCall) -> Self {
            Self::Debt(value)
        }
    }
    impl ::core::convert::From<DelegateVotingCall> for CoolerCalls {
        fn from(value: DelegateVotingCall) -> Self {
            Self::DelegateVoting(value)
        }
    }
    impl ::core::convert::From<ExtendLoanTermsCall> for CoolerCalls {
        fn from(value: ExtendLoanTermsCall) -> Self {
            Self::ExtendLoanTerms(value)
        }
    }
    impl ::core::convert::From<FactoryCall> for CoolerCalls {
        fn from(value: FactoryCall) -> Self {
            Self::Factory(value)
        }
    }
    impl ::core::convert::From<GetLoanCall> for CoolerCalls {
        fn from(value: GetLoanCall) -> Self {
            Self::GetLoan(value)
        }
    }
    impl ::core::convert::From<GetRequestCall> for CoolerCalls {
        fn from(value: GetRequestCall) -> Self {
            Self::GetRequest(value)
        }
    }
    impl ::core::convert::From<HasExpiredCall> for CoolerCalls {
        fn from(value: HasExpiredCall) -> Self {
            Self::HasExpired(value)
        }
    }
    impl ::core::convert::From<InterestForCall> for CoolerCalls {
        fn from(value: InterestForCall) -> Self {
            Self::InterestFor(value)
        }
    }
    impl ::core::convert::From<IsActiveCall> for CoolerCalls {
        fn from(value: IsActiveCall) -> Self {
            Self::IsActive(value)
        }
    }
    impl ::core::convert::From<LoansCall> for CoolerCalls {
        fn from(value: LoansCall) -> Self {
            Self::Loans(value)
        }
    }
    impl ::core::convert::From<OwnerCall> for CoolerCalls {
        fn from(value: OwnerCall) -> Self {
            Self::Owner(value)
        }
    }
    impl ::core::convert::From<RepayLoanCall> for CoolerCalls {
        fn from(value: RepayLoanCall) -> Self {
            Self::RepayLoan(value)
        }
    }
    impl ::core::convert::From<RequestLoanCall> for CoolerCalls {
        fn from(value: RequestLoanCall) -> Self {
            Self::RequestLoan(value)
        }
    }
    impl ::core::convert::From<RequestsCall> for CoolerCalls {
        fn from(value: RequestsCall) -> Self {
            Self::Requests(value)
        }
    }
    impl ::core::convert::From<RescindRequestCall> for CoolerCalls {
        fn from(value: RescindRequestCall) -> Self {
            Self::RescindRequest(value)
        }
    }
    impl ::core::convert::From<SetRepaymentAddressCall> for CoolerCalls {
        fn from(value: SetRepaymentAddressCall) -> Self {
            Self::SetRepaymentAddress(value)
        }
    }
    impl ::core::convert::From<TransferOwnershipCall> for CoolerCalls {
        fn from(value: TransferOwnershipCall) -> Self {
            Self::TransferOwnership(value)
        }
    }
    ///Container type for all return fields from the `approvals` function with signature `approvals(uint256)` and selector `0x63035f66`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct ApprovalsReturn(pub ::ethers::core::types::Address);
    ///Container type for all return fields from the `claimDefaulted` function with signature `claimDefaulted(uint256)` and selector `0x57e8a2f0`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct ClaimDefaultedReturn(
        pub ::ethers::core::types::U256,
        pub ::ethers::core::types::U256,
        pub ::ethers::core::types::U256,
        pub ::ethers::core::types::U256,
    );
    ///Container type for all return fields from the `clearRequest` function with signature `clearRequest(uint256,address,bool)` and selector `0x10cf5a19`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct ClearRequestReturn {
        pub loan_id: ::ethers::core::types::U256,
    }
    ///Container type for all return fields from the `collateral` function with signature `collateral()` and selector `0xd8dfeb45`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct CollateralReturn {
        pub collateral: ::ethers::core::types::Address,
    }
    ///Container type for all return fields from the `collateralFor` function with signature `collateralFor(uint256,uint256)` and selector `0x99c6b2ef`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct CollateralForReturn(pub ::ethers::core::types::U256);
    ///Container type for all return fields from the `debt` function with signature `debt()` and selector `0x0dca59c1`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct DebtReturn {
        pub debt: ::ethers::core::types::Address,
    }
    ///Container type for all return fields from the `factory` function with signature `factory()` and selector `0xc45a0155`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct FactoryReturn {
        pub factory: ::ethers::core::types::Address,
    }
    ///Container type for all return fields from the `getLoan` function with signature `getLoan(uint256)` and selector `0x504006ca`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct GetLoanReturn(pub Loan);
    ///Container type for all return fields from the `getRequest` function with signature `getRequest(uint256)` and selector `0xc58343ef`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct GetRequestReturn(pub Request);
    ///Container type for all return fields from the `hasExpired` function with signature `hasExpired(uint256)` and selector `0x49fcbc54`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct HasExpiredReturn(pub bool);
    ///Container type for all return fields from the `interestFor` function with signature `interestFor(uint256,uint256,uint256)` and selector `0x9bcf40a2`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct InterestForReturn(pub ::ethers::core::types::U256);
    ///Container type for all return fields from the `isActive` function with signature `isActive(uint256)` and selector `0x82afd23b`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct IsActiveReturn(pub bool);
    ///Container type for all return fields from the `loans` function with signature `loans(uint256)` and selector `0xe1ec3c68`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct LoansReturn {
        pub request: Request,
        pub principal: ::ethers::core::types::U256,
        pub interest_due: ::ethers::core::types::U256,
        pub collateral: ::ethers::core::types::U256,
        pub expiry: ::ethers::core::types::U256,
        pub lender: ::ethers::core::types::Address,
        pub recipient: ::ethers::core::types::Address,
        pub callback: bool,
    }
    ///Container type for all return fields from the `owner` function with signature `owner()` and selector `0x8da5cb5b`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct OwnerReturn {
        pub owner: ::ethers::core::types::Address,
    }
    ///Container type for all return fields from the `repayLoan` function with signature `repayLoan(uint256,uint256)` and selector `0x8a700b53`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct RepayLoanReturn(pub ::ethers::core::types::U256);
    ///Container type for all return fields from the `requestLoan` function with signature `requestLoan(uint256,uint256,uint256,uint256)` and selector `0x753c7ff9`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct RequestLoanReturn {
        pub req_id: ::ethers::core::types::U256,
    }
    ///Container type for all return fields from the `requests` function with signature `requests(uint256)` and selector `0x81d12c58`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct RequestsReturn {
        pub amount: ::ethers::core::types::U256,
        pub interest: ::ethers::core::types::U256,
        pub loan_to_collateral: ::ethers::core::types::U256,
        pub duration: ::ethers::core::types::U256,
        pub active: bool,
        pub requester: ::ethers::core::types::Address,
    }
    ///`Loan((uint256,uint256,uint256,uint256,bool,address),uint256,uint256,uint256,uint256,address,address,bool)`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct Loan {
        pub request: Request,
        pub principal: ::ethers::core::types::U256,
        pub interest_due: ::ethers::core::types::U256,
        pub collateral: ::ethers::core::types::U256,
        pub expiry: ::ethers::core::types::U256,
        pub lender: ::ethers::core::types::Address,
        pub recipient: ::ethers::core::types::Address,
        pub callback: bool,
    }
    ///`Request(uint256,uint256,uint256,uint256,bool,address)`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct Request {
        pub amount: ::ethers::core::types::U256,
        pub interest: ::ethers::core::types::U256,
        pub loan_to_collateral: ::ethers::core::types::U256,
        pub duration: ::ethers::core::types::U256,
        pub active: bool,
        pub requester: ::ethers::core::types::Address,
    }
}
