#![allow(clippy::all)]
//! This lib contains abigen! generated bindings for solidity contracts.
//! This is autogenerated code.
//! Do not manually edit these files.
//! These files may be overwritten by the codegen system at any time.
pub use cooler_factory::*;
/// This module was auto-generated with ethers-rs Abigen.
/// More information at: <https://github.com/gakonst/ethers-rs>
#[allow(
    clippy::enum_variant_names,
    clippy::too_many_arguments,
    clippy::upper_case_acronyms,
    clippy::type_complexity,
    dead_code,
    non_camel_case_types,
)]
pub mod cooler_factory {
    #[allow(deprecated)]
    fn __abi() -> ::ethers::core::abi::Abi {
        ::ethers::core::abi::ethabi::Contract {
            constructor: ::core::option::Option::Some(::ethers::core::abi::ethabi::Constructor {
                inputs: ::std::vec![],
            }),
            functions: ::core::convert::From::from([
                (
                    ::std::borrow::ToOwned::to_owned("coolerImplementation"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::Function {
                            name: ::std::borrow::ToOwned::to_owned(
                                "coolerImplementation",
                            ),
                            inputs: ::std::vec![],
                            outputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::string::String::new(),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Address,
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("contract Cooler"),
                                    ),
                                },
                            ],
                            constant: ::core::option::Option::None,
                            state_mutability: ::ethers::core::abi::ethabi::StateMutability::View,
                        },
                    ],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("coolersFor"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::Function {
                            name: ::std::borrow::ToOwned::to_owned("coolersFor"),
                            inputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::string::String::new(),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Address,
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("contract ERC20"),
                                    ),
                                },
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::string::String::new(),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Address,
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("contract ERC20"),
                                    ),
                                },
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::string::String::new(),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Uint(
                                        256usize,
                                    ),
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("uint256"),
                                    ),
                                },
                            ],
                            outputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::string::String::new(),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Address,
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("address"),
                                    ),
                                },
                            ],
                            constant: ::core::option::Option::None,
                            state_mutability: ::ethers::core::abi::ethabi::StateMutability::View,
                        },
                    ],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("created"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::Function {
                            name: ::std::borrow::ToOwned::to_owned("created"),
                            inputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::string::String::new(),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Address,
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("address"),
                                    ),
                                },
                            ],
                            outputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::string::String::new(),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Bool,
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("bool"),
                                    ),
                                },
                            ],
                            constant: ::core::option::Option::None,
                            state_mutability: ::ethers::core::abi::ethabi::StateMutability::View,
                        },
                    ],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("generateCooler"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::Function {
                            name: ::std::borrow::ToOwned::to_owned("generateCooler"),
                            inputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("collateral_"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Address,
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("contract ERC20"),
                                    ),
                                },
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("debt_"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Address,
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("contract ERC20"),
                                    ),
                                },
                            ],
                            outputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("cooler"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Address,
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("address"),
                                    ),
                                },
                            ],
                            constant: ::core::option::Option::None,
                            state_mutability: ::ethers::core::abi::ethabi::StateMutability::NonPayable,
                        },
                    ],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("getCoolerFor"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::Function {
                            name: ::std::borrow::ToOwned::to_owned("getCoolerFor"),
                            inputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("user_"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Address,
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("address"),
                                    ),
                                },
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("collateral_"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Address,
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("address"),
                                    ),
                                },
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("debt_"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Address,
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("address"),
                                    ),
                                },
                            ],
                            outputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::string::String::new(),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Address,
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("address"),
                                    ),
                                },
                            ],
                            constant: ::core::option::Option::None,
                            state_mutability: ::ethers::core::abi::ethabi::StateMutability::View,
                        },
                    ],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("logClearRequest"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::Function {
                            name: ::std::borrow::ToOwned::to_owned("logClearRequest"),
                            inputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("reqID_"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Uint(
                                        256usize,
                                    ),
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("uint256"),
                                    ),
                                },
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("loanID_"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Uint(
                                        256usize,
                                    ),
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("uint256"),
                                    ),
                                },
                            ],
                            outputs: ::std::vec![],
                            constant: ::core::option::Option::None,
                            state_mutability: ::ethers::core::abi::ethabi::StateMutability::NonPayable,
                        },
                    ],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("logDefaultLoan"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::Function {
                            name: ::std::borrow::ToOwned::to_owned("logDefaultLoan"),
                            inputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("loanID_"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Uint(
                                        256usize,
                                    ),
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("uint256"),
                                    ),
                                },
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("collateral_"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Uint(
                                        256usize,
                                    ),
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("uint256"),
                                    ),
                                },
                            ],
                            outputs: ::std::vec![],
                            constant: ::core::option::Option::None,
                            state_mutability: ::ethers::core::abi::ethabi::StateMutability::NonPayable,
                        },
                    ],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("logExtendLoan"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::Function {
                            name: ::std::borrow::ToOwned::to_owned("logExtendLoan"),
                            inputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("loanID_"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Uint(
                                        256usize,
                                    ),
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("uint256"),
                                    ),
                                },
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("times_"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Uint(8usize),
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("uint8"),
                                    ),
                                },
                            ],
                            outputs: ::std::vec![],
                            constant: ::core::option::Option::None,
                            state_mutability: ::ethers::core::abi::ethabi::StateMutability::NonPayable,
                        },
                    ],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("logRepayLoan"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::Function {
                            name: ::std::borrow::ToOwned::to_owned("logRepayLoan"),
                            inputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("loanID_"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Uint(
                                        256usize,
                                    ),
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("uint256"),
                                    ),
                                },
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("repayment_"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Uint(
                                        256usize,
                                    ),
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("uint256"),
                                    ),
                                },
                            ],
                            outputs: ::std::vec![],
                            constant: ::core::option::Option::None,
                            state_mutability: ::ethers::core::abi::ethabi::StateMutability::NonPayable,
                        },
                    ],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("logRequestLoan"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::Function {
                            name: ::std::borrow::ToOwned::to_owned("logRequestLoan"),
                            inputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("reqID_"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Uint(
                                        256usize,
                                    ),
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("uint256"),
                                    ),
                                },
                            ],
                            outputs: ::std::vec![],
                            constant: ::core::option::Option::None,
                            state_mutability: ::ethers::core::abi::ethabi::StateMutability::NonPayable,
                        },
                    ],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("logRescindRequest"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::Function {
                            name: ::std::borrow::ToOwned::to_owned("logRescindRequest"),
                            inputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("reqID_"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Uint(
                                        256usize,
                                    ),
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("uint256"),
                                    ),
                                },
                            ],
                            outputs: ::std::vec![],
                            constant: ::core::option::Option::None,
                            state_mutability: ::ethers::core::abi::ethabi::StateMutability::NonPayable,
                        },
                    ],
                ),
            ]),
            events: ::core::convert::From::from([
                (
                    ::std::borrow::ToOwned::to_owned("ClearRequest"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::Event {
                            name: ::std::borrow::ToOwned::to_owned("ClearRequest"),
                            inputs: ::std::vec![
                                ::ethers::core::abi::ethabi::EventParam {
                                    name: ::std::borrow::ToOwned::to_owned("cooler"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Address,
                                    indexed: true,
                                },
                                ::ethers::core::abi::ethabi::EventParam {
                                    name: ::std::borrow::ToOwned::to_owned("reqID"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Uint(
                                        256usize,
                                    ),
                                    indexed: false,
                                },
                                ::ethers::core::abi::ethabi::EventParam {
                                    name: ::std::borrow::ToOwned::to_owned("loanID"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Uint(
                                        256usize,
                                    ),
                                    indexed: false,
                                },
                            ],
                            anonymous: false,
                        },
                    ],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("DefaultLoan"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::Event {
                            name: ::std::borrow::ToOwned::to_owned("DefaultLoan"),
                            inputs: ::std::vec![
                                ::ethers::core::abi::ethabi::EventParam {
                                    name: ::std::borrow::ToOwned::to_owned("cooler"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Address,
                                    indexed: true,
                                },
                                ::ethers::core::abi::ethabi::EventParam {
                                    name: ::std::borrow::ToOwned::to_owned("loanID"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Uint(
                                        256usize,
                                    ),
                                    indexed: false,
                                },
                                ::ethers::core::abi::ethabi::EventParam {
                                    name: ::std::borrow::ToOwned::to_owned("amount"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Uint(
                                        256usize,
                                    ),
                                    indexed: false,
                                },
                            ],
                            anonymous: false,
                        },
                    ],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("ExtendLoan"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::Event {
                            name: ::std::borrow::ToOwned::to_owned("ExtendLoan"),
                            inputs: ::std::vec![
                                ::ethers::core::abi::ethabi::EventParam {
                                    name: ::std::borrow::ToOwned::to_owned("cooler"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Address,
                                    indexed: true,
                                },
                                ::ethers::core::abi::ethabi::EventParam {
                                    name: ::std::borrow::ToOwned::to_owned("loanID"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Uint(
                                        256usize,
                                    ),
                                    indexed: false,
                                },
                                ::ethers::core::abi::ethabi::EventParam {
                                    name: ::std::borrow::ToOwned::to_owned("times"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Uint(8usize),
                                    indexed: false,
                                },
                            ],
                            anonymous: false,
                        },
                    ],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("RepayLoan"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::Event {
                            name: ::std::borrow::ToOwned::to_owned("RepayLoan"),
                            inputs: ::std::vec![
                                ::ethers::core::abi::ethabi::EventParam {
                                    name: ::std::borrow::ToOwned::to_owned("cooler"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Address,
                                    indexed: true,
                                },
                                ::ethers::core::abi::ethabi::EventParam {
                                    name: ::std::borrow::ToOwned::to_owned("loanID"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Uint(
                                        256usize,
                                    ),
                                    indexed: false,
                                },
                                ::ethers::core::abi::ethabi::EventParam {
                                    name: ::std::borrow::ToOwned::to_owned("amount"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Uint(
                                        256usize,
                                    ),
                                    indexed: false,
                                },
                            ],
                            anonymous: false,
                        },
                    ],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("RequestLoan"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::Event {
                            name: ::std::borrow::ToOwned::to_owned("RequestLoan"),
                            inputs: ::std::vec![
                                ::ethers::core::abi::ethabi::EventParam {
                                    name: ::std::borrow::ToOwned::to_owned("cooler"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Address,
                                    indexed: true,
                                },
                                ::ethers::core::abi::ethabi::EventParam {
                                    name: ::std::borrow::ToOwned::to_owned("collateral"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Address,
                                    indexed: false,
                                },
                                ::ethers::core::abi::ethabi::EventParam {
                                    name: ::std::borrow::ToOwned::to_owned("debt"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Address,
                                    indexed: false,
                                },
                                ::ethers::core::abi::ethabi::EventParam {
                                    name: ::std::borrow::ToOwned::to_owned("reqID"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Uint(
                                        256usize,
                                    ),
                                    indexed: false,
                                },
                            ],
                            anonymous: false,
                        },
                    ],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("RescindRequest"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::Event {
                            name: ::std::borrow::ToOwned::to_owned("RescindRequest"),
                            inputs: ::std::vec![
                                ::ethers::core::abi::ethabi::EventParam {
                                    name: ::std::borrow::ToOwned::to_owned("cooler"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Address,
                                    indexed: true,
                                },
                                ::ethers::core::abi::ethabi::EventParam {
                                    name: ::std::borrow::ToOwned::to_owned("reqID"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Uint(
                                        256usize,
                                    ),
                                    indexed: false,
                                },
                            ],
                            anonymous: false,
                        },
                    ],
                ),
            ]),
            errors: ::core::convert::From::from([
                (
                    ::std::borrow::ToOwned::to_owned("CreateFail"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::AbiError {
                            name: ::std::borrow::ToOwned::to_owned("CreateFail"),
                            inputs: ::std::vec![],
                        },
                    ],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("DecimalsNot18"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::AbiError {
                            name: ::std::borrow::ToOwned::to_owned("DecimalsNot18"),
                            inputs: ::std::vec![],
                        },
                    ],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("NotFromFactory"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::AbiError {
                            name: ::std::borrow::ToOwned::to_owned("NotFromFactory"),
                            inputs: ::std::vec![],
                        },
                    ],
                ),
            ]),
            receive: false,
            fallback: false,
        }
    }
    ///The parsed JSON ABI of the contract.
    pub static COOLERFACTORY_ABI: ::ethers::contract::Lazy<::ethers::core::abi::Abi> = ::ethers::contract::Lazy::new(
        __abi,
    );
    pub struct CoolerFactory<M>(::ethers::contract::Contract<M>);
    impl<M> ::core::clone::Clone for CoolerFactory<M> {
        fn clone(&self) -> Self {
            Self(::core::clone::Clone::clone(&self.0))
        }
    }
    impl<M> ::core::ops::Deref for CoolerFactory<M> {
        type Target = ::ethers::contract::Contract<M>;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl<M> ::core::ops::DerefMut for CoolerFactory<M> {
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl<M> ::core::fmt::Debug for CoolerFactory<M> {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple(::core::stringify!(CoolerFactory))
                .field(&self.address())
                .finish()
        }
    }
    impl<M: ::ethers::providers::Middleware> CoolerFactory<M> {
        /// Creates a new contract instance with the specified `ethers` client at
        /// `address`. The contract derefs to a `ethers::Contract` object.
        pub fn new<T: Into<::ethers::core::types::Address>>(
            address: T,
            client: ::std::sync::Arc<M>,
        ) -> Self {
            Self(
                ::ethers::contract::Contract::new(
                    address.into(),
                    COOLERFACTORY_ABI.clone(),
                    client,
                ),
            )
        }
        ///Calls the contract's `coolerImplementation` (0x0b8baa43) function
        pub fn cooler_implementation(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<
            M,
            ::ethers::core::types::Address,
        > {
            self.0
                .method_hash([11, 139, 170, 67], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `coolersFor` (0x18ff5d59) function
        pub fn coolers_for(
            &self,
            p0: ::ethers::core::types::Address,
            p1: ::ethers::core::types::Address,
            p2: ::ethers::core::types::U256,
        ) -> ::ethers::contract::builders::ContractCall<
            M,
            ::ethers::core::types::Address,
        > {
            self.0
                .method_hash([24, 255, 93, 89], (p0, p1, p2))
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `created` (0xd42efd83) function
        pub fn created(
            &self,
            p0: ::ethers::core::types::Address,
        ) -> ::ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([212, 46, 253, 131], p0)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `generateCooler` (0x7b7d9ef8) function
        pub fn generate_cooler(
            &self,
            collateral: ::ethers::core::types::Address,
            debt: ::ethers::core::types::Address,
        ) -> ::ethers::contract::builders::ContractCall<
            M,
            ::ethers::core::types::Address,
        > {
            self.0
                .method_hash([123, 125, 158, 248], (collateral, debt))
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `getCoolerFor` (0xa023bd6e) function
        pub fn get_cooler_for(
            &self,
            user: ::ethers::core::types::Address,
            collateral: ::ethers::core::types::Address,
            debt: ::ethers::core::types::Address,
        ) -> ::ethers::contract::builders::ContractCall<
            M,
            ::ethers::core::types::Address,
        > {
            self.0
                .method_hash([160, 35, 189, 110], (user, collateral, debt))
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `logClearRequest` (0x9c6c4a81) function
        pub fn log_clear_request(
            &self,
            req_id: ::ethers::core::types::U256,
            loan_id: ::ethers::core::types::U256,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([156, 108, 74, 129], (req_id, loan_id))
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `logDefaultLoan` (0x0f30e65e) function
        pub fn log_default_loan(
            &self,
            loan_id: ::ethers::core::types::U256,
            collateral: ::ethers::core::types::U256,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([15, 48, 230, 94], (loan_id, collateral))
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `logExtendLoan` (0xf9b4cb17) function
        pub fn log_extend_loan(
            &self,
            loan_id: ::ethers::core::types::U256,
            times: u8,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([249, 180, 203, 23], (loan_id, times))
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `logRepayLoan` (0xf7767d0c) function
        pub fn log_repay_loan(
            &self,
            loan_id: ::ethers::core::types::U256,
            repayment: ::ethers::core::types::U256,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([247, 118, 125, 12], (loan_id, repayment))
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `logRequestLoan` (0x7447be66) function
        pub fn log_request_loan(
            &self,
            req_id: ::ethers::core::types::U256,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([116, 71, 190, 102], req_id)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `logRescindRequest` (0x6763f122) function
        pub fn log_rescind_request(
            &self,
            req_id: ::ethers::core::types::U256,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([103, 99, 241, 34], req_id)
                .expect("method not found (this should never happen)")
        }
        ///Gets the contract's `ClearRequest` event
        pub fn clear_request_filter(
            &self,
        ) -> ::ethers::contract::builders::Event<
            ::std::sync::Arc<M>,
            M,
            ClearRequestFilter,
        > {
            self.0.event()
        }
        ///Gets the contract's `DefaultLoan` event
        pub fn default_loan_filter(
            &self,
        ) -> ::ethers::contract::builders::Event<
            ::std::sync::Arc<M>,
            M,
            DefaultLoanFilter,
        > {
            self.0.event()
        }
        ///Gets the contract's `ExtendLoan` event
        pub fn extend_loan_filter(
            &self,
        ) -> ::ethers::contract::builders::Event<
            ::std::sync::Arc<M>,
            M,
            ExtendLoanFilter,
        > {
            self.0.event()
        }
        ///Gets the contract's `RepayLoan` event
        pub fn repay_loan_filter(
            &self,
        ) -> ::ethers::contract::builders::Event<
            ::std::sync::Arc<M>,
            M,
            RepayLoanFilter,
        > {
            self.0.event()
        }
        ///Gets the contract's `RequestLoan` event
        pub fn request_loan_filter(
            &self,
        ) -> ::ethers::contract::builders::Event<
            ::std::sync::Arc<M>,
            M,
            RequestLoanFilter,
        > {
            self.0.event()
        }
        ///Gets the contract's `RescindRequest` event
        pub fn rescind_request_filter(
            &self,
        ) -> ::ethers::contract::builders::Event<
            ::std::sync::Arc<M>,
            M,
            RescindRequestFilter,
        > {
            self.0.event()
        }
        /// Returns an `Event` builder for all the events of this contract.
        pub fn events(
            &self,
        ) -> ::ethers::contract::builders::Event<
            ::std::sync::Arc<M>,
            M,
            CoolerFactoryEvents,
        > {
            self.0.event_with_filter(::core::default::Default::default())
        }
    }
    impl<M: ::ethers::providers::Middleware> From<::ethers::contract::Contract<M>>
    for CoolerFactory<M> {
        fn from(contract: ::ethers::contract::Contract<M>) -> Self {
            Self::new(contract.address(), contract.client())
        }
    }
    ///Custom Error type `CreateFail` with signature `CreateFail()` and selector `0xebfef188`
    #[derive(
        Clone,
        ::ethers::contract::EthError,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[etherror(name = "CreateFail", abi = "CreateFail()")]
    pub struct CreateFail;
    ///Custom Error type `DecimalsNot18` with signature `DecimalsNot18()` and selector `0xad8d1941`
    #[derive(
        Clone,
        ::ethers::contract::EthError,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[etherror(name = "DecimalsNot18", abi = "DecimalsNot18()")]
    pub struct DecimalsNot18;
    ///Custom Error type `NotFromFactory` with signature `NotFromFactory()` and selector `0xb1391cf3`
    #[derive(
        Clone,
        ::ethers::contract::EthError,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[etherror(name = "NotFromFactory", abi = "NotFromFactory()")]
    pub struct NotFromFactory;
    ///Container type for all of the contract's custom errors
    #[derive(Clone, ::ethers::contract::EthAbiType, Debug, PartialEq, Eq, Hash)]
    pub enum CoolerFactoryErrors {
        CreateFail(CreateFail),
        DecimalsNot18(DecimalsNot18),
        NotFromFactory(NotFromFactory),
        /// The standard solidity revert string, with selector
        /// Error(string) -- 0x08c379a0
        RevertString(::std::string::String),
    }
    impl ::ethers::core::abi::AbiDecode for CoolerFactoryErrors {
        fn decode(
            data: impl AsRef<[u8]>,
        ) -> ::core::result::Result<Self, ::ethers::core::abi::AbiError> {
            let data = data.as_ref();
            if let Ok(decoded) = <::std::string::String as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::RevertString(decoded));
            }
            if let Ok(decoded) = <CreateFail as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::CreateFail(decoded));
            }
            if let Ok(decoded) = <DecimalsNot18 as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::DecimalsNot18(decoded));
            }
            if let Ok(decoded) = <NotFromFactory as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::NotFromFactory(decoded));
            }
            Err(::ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ::ethers::core::abi::AbiEncode for CoolerFactoryErrors {
        fn encode(self) -> ::std::vec::Vec<u8> {
            match self {
                Self::CreateFail(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::DecimalsNot18(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::NotFromFactory(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::RevertString(s) => ::ethers::core::abi::AbiEncode::encode(s),
            }
        }
    }
    impl ::ethers::contract::ContractRevert for CoolerFactoryErrors {
        fn valid_selector(selector: [u8; 4]) -> bool {
            match selector {
                [0x08, 0xc3, 0x79, 0xa0] => true,
                _ if selector
                    == <CreateFail as ::ethers::contract::EthError>::selector() => true,
                _ if selector
                    == <DecimalsNot18 as ::ethers::contract::EthError>::selector() => {
                    true
                }
                _ if selector
                    == <NotFromFactory as ::ethers::contract::EthError>::selector() => {
                    true
                }
                _ => false,
            }
        }
    }
    impl ::core::fmt::Display for CoolerFactoryErrors {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
                Self::CreateFail(element) => ::core::fmt::Display::fmt(element, f),
                Self::DecimalsNot18(element) => ::core::fmt::Display::fmt(element, f),
                Self::NotFromFactory(element) => ::core::fmt::Display::fmt(element, f),
                Self::RevertString(s) => ::core::fmt::Display::fmt(s, f),
            }
        }
    }
    impl ::core::convert::From<::std::string::String> for CoolerFactoryErrors {
        fn from(value: String) -> Self {
            Self::RevertString(value)
        }
    }
    impl ::core::convert::From<CreateFail> for CoolerFactoryErrors {
        fn from(value: CreateFail) -> Self {
            Self::CreateFail(value)
        }
    }
    impl ::core::convert::From<DecimalsNot18> for CoolerFactoryErrors {
        fn from(value: DecimalsNot18) -> Self {
            Self::DecimalsNot18(value)
        }
    }
    impl ::core::convert::From<NotFromFactory> for CoolerFactoryErrors {
        fn from(value: NotFromFactory) -> Self {
            Self::NotFromFactory(value)
        }
    }
    #[derive(
        Clone,
        ::ethers::contract::EthEvent,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethevent(name = "ClearRequest", abi = "ClearRequest(address,uint256,uint256)")]
    pub struct ClearRequestFilter {
        #[ethevent(indexed)]
        pub cooler: ::ethers::core::types::Address,
        pub req_id: ::ethers::core::types::U256,
        pub loan_id: ::ethers::core::types::U256,
    }
    #[derive(
        Clone,
        ::ethers::contract::EthEvent,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethevent(name = "DefaultLoan", abi = "DefaultLoan(address,uint256,uint256)")]
    pub struct DefaultLoanFilter {
        #[ethevent(indexed)]
        pub cooler: ::ethers::core::types::Address,
        pub loan_id: ::ethers::core::types::U256,
        pub amount: ::ethers::core::types::U256,
    }
    #[derive(
        Clone,
        ::ethers::contract::EthEvent,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethevent(name = "ExtendLoan", abi = "ExtendLoan(address,uint256,uint8)")]
    pub struct ExtendLoanFilter {
        #[ethevent(indexed)]
        pub cooler: ::ethers::core::types::Address,
        pub loan_id: ::ethers::core::types::U256,
        pub times: u8,
    }
    #[derive(
        Clone,
        ::ethers::contract::EthEvent,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethevent(name = "RepayLoan", abi = "RepayLoan(address,uint256,uint256)")]
    pub struct RepayLoanFilter {
        #[ethevent(indexed)]
        pub cooler: ::ethers::core::types::Address,
        pub loan_id: ::ethers::core::types::U256,
        pub amount: ::ethers::core::types::U256,
    }
    #[derive(
        Clone,
        ::ethers::contract::EthEvent,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethevent(
        name = "RequestLoan",
        abi = "RequestLoan(address,address,address,uint256)"
    )]
    pub struct RequestLoanFilter {
        #[ethevent(indexed)]
        pub cooler: ::ethers::core::types::Address,
        pub collateral: ::ethers::core::types::Address,
        pub debt: ::ethers::core::types::Address,
        pub req_id: ::ethers::core::types::U256,
    }
    #[derive(
        Clone,
        ::ethers::contract::EthEvent,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethevent(name = "RescindRequest", abi = "RescindRequest(address,uint256)")]
    pub struct RescindRequestFilter {
        #[ethevent(indexed)]
        pub cooler: ::ethers::core::types::Address,
        pub req_id: ::ethers::core::types::U256,
    }
    ///Container type for all of the contract's events
    #[derive(Clone, ::ethers::contract::EthAbiType, Debug, PartialEq, Eq, Hash)]
    pub enum CoolerFactoryEvents {
        ClearRequestFilter(ClearRequestFilter),
        DefaultLoanFilter(DefaultLoanFilter),
        ExtendLoanFilter(ExtendLoanFilter),
        RepayLoanFilter(RepayLoanFilter),
        RequestLoanFilter(RequestLoanFilter),
        RescindRequestFilter(RescindRequestFilter),
    }
    impl ::ethers::contract::EthLogDecode for CoolerFactoryEvents {
        fn decode_log(
            log: &::ethers::core::abi::RawLog,
        ) -> ::core::result::Result<Self, ::ethers::core::abi::Error> {
            if let Ok(decoded) = ClearRequestFilter::decode_log(log) {
                return Ok(CoolerFactoryEvents::ClearRequestFilter(decoded));
            }
            if let Ok(decoded) = DefaultLoanFilter::decode_log(log) {
                return Ok(CoolerFactoryEvents::DefaultLoanFilter(decoded));
            }
            if let Ok(decoded) = ExtendLoanFilter::decode_log(log) {
                return Ok(CoolerFactoryEvents::ExtendLoanFilter(decoded));
            }
            if let Ok(decoded) = RepayLoanFilter::decode_log(log) {
                return Ok(CoolerFactoryEvents::RepayLoanFilter(decoded));
            }
            if let Ok(decoded) = RequestLoanFilter::decode_log(log) {
                return Ok(CoolerFactoryEvents::RequestLoanFilter(decoded));
            }
            if let Ok(decoded) = RescindRequestFilter::decode_log(log) {
                return Ok(CoolerFactoryEvents::RescindRequestFilter(decoded));
            }
            Err(::ethers::core::abi::Error::InvalidData)
        }
    }
    impl ::core::fmt::Display for CoolerFactoryEvents {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
                Self::ClearRequestFilter(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
                Self::DefaultLoanFilter(element) => ::core::fmt::Display::fmt(element, f),
                Self::ExtendLoanFilter(element) => ::core::fmt::Display::fmt(element, f),
                Self::RepayLoanFilter(element) => ::core::fmt::Display::fmt(element, f),
                Self::RequestLoanFilter(element) => ::core::fmt::Display::fmt(element, f),
                Self::RescindRequestFilter(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
            }
        }
    }
    impl ::core::convert::From<ClearRequestFilter> for CoolerFactoryEvents {
        fn from(value: ClearRequestFilter) -> Self {
            Self::ClearRequestFilter(value)
        }
    }
    impl ::core::convert::From<DefaultLoanFilter> for CoolerFactoryEvents {
        fn from(value: DefaultLoanFilter) -> Self {
            Self::DefaultLoanFilter(value)
        }
    }
    impl ::core::convert::From<ExtendLoanFilter> for CoolerFactoryEvents {
        fn from(value: ExtendLoanFilter) -> Self {
            Self::ExtendLoanFilter(value)
        }
    }
    impl ::core::convert::From<RepayLoanFilter> for CoolerFactoryEvents {
        fn from(value: RepayLoanFilter) -> Self {
            Self::RepayLoanFilter(value)
        }
    }
    impl ::core::convert::From<RequestLoanFilter> for CoolerFactoryEvents {
        fn from(value: RequestLoanFilter) -> Self {
            Self::RequestLoanFilter(value)
        }
    }
    impl ::core::convert::From<RescindRequestFilter> for CoolerFactoryEvents {
        fn from(value: RescindRequestFilter) -> Self {
            Self::RescindRequestFilter(value)
        }
    }
    ///Container type for all input parameters for the `coolerImplementation` function with signature `coolerImplementation()` and selector `0x0b8baa43`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "coolerImplementation", abi = "coolerImplementation()")]
    pub struct CoolerImplementationCall;
    ///Container type for all input parameters for the `coolersFor` function with signature `coolersFor(address,address,uint256)` and selector `0x18ff5d59`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "coolersFor", abi = "coolersFor(address,address,uint256)")]
    pub struct CoolersForCall(
        pub ::ethers::core::types::Address,
        pub ::ethers::core::types::Address,
        pub ::ethers::core::types::U256,
    );
    ///Container type for all input parameters for the `created` function with signature `created(address)` and selector `0xd42efd83`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "created", abi = "created(address)")]
    pub struct CreatedCall(pub ::ethers::core::types::Address);
    ///Container type for all input parameters for the `generateCooler` function with signature `generateCooler(address,address)` and selector `0x7b7d9ef8`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "generateCooler", abi = "generateCooler(address,address)")]
    pub struct GenerateCoolerCall {
        pub collateral: ::ethers::core::types::Address,
        pub debt: ::ethers::core::types::Address,
    }
    ///Container type for all input parameters for the `getCoolerFor` function with signature `getCoolerFor(address,address,address)` and selector `0xa023bd6e`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "getCoolerFor", abi = "getCoolerFor(address,address,address)")]
    pub struct GetCoolerForCall {
        pub user: ::ethers::core::types::Address,
        pub collateral: ::ethers::core::types::Address,
        pub debt: ::ethers::core::types::Address,
    }
    ///Container type for all input parameters for the `logClearRequest` function with signature `logClearRequest(uint256,uint256)` and selector `0x9c6c4a81`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "logClearRequest", abi = "logClearRequest(uint256,uint256)")]
    pub struct LogClearRequestCall {
        pub req_id: ::ethers::core::types::U256,
        pub loan_id: ::ethers::core::types::U256,
    }
    ///Container type for all input parameters for the `logDefaultLoan` function with signature `logDefaultLoan(uint256,uint256)` and selector `0x0f30e65e`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "logDefaultLoan", abi = "logDefaultLoan(uint256,uint256)")]
    pub struct LogDefaultLoanCall {
        pub loan_id: ::ethers::core::types::U256,
        pub collateral: ::ethers::core::types::U256,
    }
    ///Container type for all input parameters for the `logExtendLoan` function with signature `logExtendLoan(uint256,uint8)` and selector `0xf9b4cb17`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "logExtendLoan", abi = "logExtendLoan(uint256,uint8)")]
    pub struct LogExtendLoanCall {
        pub loan_id: ::ethers::core::types::U256,
        pub times: u8,
    }
    ///Container type for all input parameters for the `logRepayLoan` function with signature `logRepayLoan(uint256,uint256)` and selector `0xf7767d0c`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "logRepayLoan", abi = "logRepayLoan(uint256,uint256)")]
    pub struct LogRepayLoanCall {
        pub loan_id: ::ethers::core::types::U256,
        pub repayment: ::ethers::core::types::U256,
    }
    ///Container type for all input parameters for the `logRequestLoan` function with signature `logRequestLoan(uint256)` and selector `0x7447be66`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "logRequestLoan", abi = "logRequestLoan(uint256)")]
    pub struct LogRequestLoanCall {
        pub req_id: ::ethers::core::types::U256,
    }
    ///Container type for all input parameters for the `logRescindRequest` function with signature `logRescindRequest(uint256)` and selector `0x6763f122`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "logRescindRequest", abi = "logRescindRequest(uint256)")]
    pub struct LogRescindRequestCall {
        pub req_id: ::ethers::core::types::U256,
    }
    ///Container type for all of the contract's call
    #[derive(Clone, ::ethers::contract::EthAbiType, Debug, PartialEq, Eq, Hash)]
    pub enum CoolerFactoryCalls {
        CoolerImplementation(CoolerImplementationCall),
        CoolersFor(CoolersForCall),
        Created(CreatedCall),
        GenerateCooler(GenerateCoolerCall),
        GetCoolerFor(GetCoolerForCall),
        LogClearRequest(LogClearRequestCall),
        LogDefaultLoan(LogDefaultLoanCall),
        LogExtendLoan(LogExtendLoanCall),
        LogRepayLoan(LogRepayLoanCall),
        LogRequestLoan(LogRequestLoanCall),
        LogRescindRequest(LogRescindRequestCall),
    }
    impl ::ethers::core::abi::AbiDecode for CoolerFactoryCalls {
        fn decode(
            data: impl AsRef<[u8]>,
        ) -> ::core::result::Result<Self, ::ethers::core::abi::AbiError> {
            let data = data.as_ref();
            if let Ok(decoded) = <CoolerImplementationCall as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::CoolerImplementation(decoded));
            }
            if let Ok(decoded) = <CoolersForCall as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::CoolersFor(decoded));
            }
            if let Ok(decoded) = <CreatedCall as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::Created(decoded));
            }
            if let Ok(decoded) = <GenerateCoolerCall as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::GenerateCooler(decoded));
            }
            if let Ok(decoded) = <GetCoolerForCall as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::GetCoolerFor(decoded));
            }
            if let Ok(decoded) = <LogClearRequestCall as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::LogClearRequest(decoded));
            }
            if let Ok(decoded) = <LogDefaultLoanCall as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::LogDefaultLoan(decoded));
            }
            if let Ok(decoded) = <LogExtendLoanCall as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::LogExtendLoan(decoded));
            }
            if let Ok(decoded) = <LogRepayLoanCall as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::LogRepayLoan(decoded));
            }
            if let Ok(decoded) = <LogRequestLoanCall as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::LogRequestLoan(decoded));
            }
            if let Ok(decoded) = <LogRescindRequestCall as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::LogRescindRequest(decoded));
            }
            Err(::ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ::ethers::core::abi::AbiEncode for CoolerFactoryCalls {
        fn encode(self) -> Vec<u8> {
            match self {
                Self::CoolerImplementation(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::CoolersFor(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::Created(element) => ::ethers::core::abi::AbiEncode::encode(element),
                Self::GenerateCooler(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::GetCoolerFor(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::LogClearRequest(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::LogDefaultLoan(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::LogExtendLoan(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::LogRepayLoan(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::LogRequestLoan(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::LogRescindRequest(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
            }
        }
    }
    impl ::core::fmt::Display for CoolerFactoryCalls {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
                Self::CoolerImplementation(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
                Self::CoolersFor(element) => ::core::fmt::Display::fmt(element, f),
                Self::Created(element) => ::core::fmt::Display::fmt(element, f),
                Self::GenerateCooler(element) => ::core::fmt::Display::fmt(element, f),
                Self::GetCoolerFor(element) => ::core::fmt::Display::fmt(element, f),
                Self::LogClearRequest(element) => ::core::fmt::Display::fmt(element, f),
                Self::LogDefaultLoan(element) => ::core::fmt::Display::fmt(element, f),
                Self::LogExtendLoan(element) => ::core::fmt::Display::fmt(element, f),
                Self::LogRepayLoan(element) => ::core::fmt::Display::fmt(element, f),
                Self::LogRequestLoan(element) => ::core::fmt::Display::fmt(element, f),
                Self::LogRescindRequest(element) => ::core::fmt::Display::fmt(element, f),
            }
        }
    }
    impl ::core::convert::From<CoolerImplementationCall> for CoolerFactoryCalls {
        fn from(value: CoolerImplementationCall) -> Self {
            Self::CoolerImplementation(value)
        }
    }
    impl ::core::convert::From<CoolersForCall> for CoolerFactoryCalls {
        fn from(value: CoolersForCall) -> Self {
            Self::CoolersFor(value)
        }
    }
    impl ::core::convert::From<CreatedCall> for CoolerFactoryCalls {
        fn from(value: CreatedCall) -> Self {
            Self::Created(value)
        }
    }
    impl ::core::convert::From<GenerateCoolerCall> for CoolerFactoryCalls {
        fn from(value: GenerateCoolerCall) -> Self {
            Self::GenerateCooler(value)
        }
    }
    impl ::core::convert::From<GetCoolerForCall> for CoolerFactoryCalls {
        fn from(value: GetCoolerForCall) -> Self {
            Self::GetCoolerFor(value)
        }
    }
    impl ::core::convert::From<LogClearRequestCall> for CoolerFactoryCalls {
        fn from(value: LogClearRequestCall) -> Self {
            Self::LogClearRequest(value)
        }
    }
    impl ::core::convert::From<LogDefaultLoanCall> for CoolerFactoryCalls {
        fn from(value: LogDefaultLoanCall) -> Self {
            Self::LogDefaultLoan(value)
        }
    }
    impl ::core::convert::From<LogExtendLoanCall> for CoolerFactoryCalls {
        fn from(value: LogExtendLoanCall) -> Self {
            Self::LogExtendLoan(value)
        }
    }
    impl ::core::convert::From<LogRepayLoanCall> for CoolerFactoryCalls {
        fn from(value: LogRepayLoanCall) -> Self {
            Self::LogRepayLoan(value)
        }
    }
    impl ::core::convert::From<LogRequestLoanCall> for CoolerFactoryCalls {
        fn from(value: LogRequestLoanCall) -> Self {
            Self::LogRequestLoan(value)
        }
    }
    impl ::core::convert::From<LogRescindRequestCall> for CoolerFactoryCalls {
        fn from(value: LogRescindRequestCall) -> Self {
            Self::LogRescindRequest(value)
        }
    }
    ///Container type for all return fields from the `coolerImplementation` function with signature `coolerImplementation()` and selector `0x0b8baa43`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct CoolerImplementationReturn(pub ::ethers::core::types::Address);
    ///Container type for all return fields from the `coolersFor` function with signature `coolersFor(address,address,uint256)` and selector `0x18ff5d59`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct CoolersForReturn(pub ::ethers::core::types::Address);
    ///Container type for all return fields from the `created` function with signature `created(address)` and selector `0xd42efd83`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct CreatedReturn(pub bool);
    ///Container type for all return fields from the `generateCooler` function with signature `generateCooler(address,address)` and selector `0x7b7d9ef8`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct GenerateCoolerReturn {
        pub cooler: ::ethers::core::types::Address,
    }
    ///Container type for all return fields from the `getCoolerFor` function with signature `getCoolerFor(address,address,address)` and selector `0xa023bd6e`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct GetCoolerForReturn(pub ::ethers::core::types::Address);
}
